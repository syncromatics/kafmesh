package generator

import (
	"io"
	"path"
	"strings"
	"text/template"

	"github.com/iancoleman/strcase"
	"github.com/syncromatics/kafmesh/pkg/models"

	"github.com/pkg/errors"
)

var (
	serviceTemplate = template.Must(template.New("").Parse(`// Code generated by kafmesh-gen. DO NOT EDIT.
package {{ .Package }}

import (
	"github.com/syncromatics/kafmesh/pkg/runner"
	"github.com/pkg/errors"
{{- range .Imports }}
	{{ printf "%q" . }}
{{- end }}
)

{{- range .Processors }}
func Register_{{ .Name }}(service *runner.Service, processor {{ .Package }}.{{ .Name }}) error {
	r, err := {{ .Package }}.Register_{{ .Name }}(service.Options(), processor)
	if err != nil {
		return errors.Wrap(err, "failed to register processor")
	}

	err = service.RegisterRunner(r)
	if err != nil {
		return errors.Wrap(err, "failed to register runner with service")
	}

	return nil
}
{{- end }}
`))
)

type serviceProcessor struct {
	Name    string
	Package string
}
type generateServiceOptions struct {
	Package    string
	Imports    []string
	Processors []serviceProcessor
}

func generateService(writer io.Writer, options generateServiceOptions) error {
	err := serviceTemplate.Execute(writer, options)
	if err != nil {
		return errors.Wrap(err, "failed to execute service template")
	}

	return nil
}

func buildServiceOptions(service *models.Service, components []*models.Component, mod string) (generateServiceOptions, error) {
	options := generateServiceOptions{
		Package:    service.Output.Package,
		Imports:    []string{},
		Processors: []serviceProcessor{},
	}

	p := path.Join(mod, service.Output.Path)

	for _, c := range components {
		options.Imports = append(options.Imports, path.Join(p, c.Name))

		for _, p := range c.Processors {
			var name strings.Builder
			for _, s := range strings.Split(p.GroupName, ".") {
				name.WriteString(strcase.ToCamel(s))
			}
			name.WriteString("Processor")

			proc := serviceProcessor{
				Package: c.Name,
				Name:    name.String(),
			}
			options.Processors = append(options.Processors, proc)
		}
	}

	return options, nil
}
