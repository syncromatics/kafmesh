package generator_test

import (
	"io/ioutil"
	"path"
	"testing"

	"github.com/stretchr/testify/assert"
)

func validateSink(tmpDir string, t *testing.T) {
	s, err := ioutil.ReadFile(path.Join(tmpDir, "internal", "kafmesh", "details", "enriched_data_postgres_sink.km.go"))
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(t, expectedSink, string(s))
}

var (
	expectedSink = `// Code generated by kafmesh-gen. DO NOT EDIT.

package details

import (
	"context"
	"time"

	"github.com/lovoo/goka"
	"github.com/pkg/errors"

	"github.com/syncromatics/kafmesh/pkg/runner"

	testSerial "test/internal/kafmesh/models/testMesh/testSerial"
)

type Enriched_Data_Postgres_Sink interface {
	Flush() error
	Collect(ctx runner.MessageContext, key string, msg *testSerial.DetailsEnriched)
}

type impl_Enriched_Data_Postgres_Sink struct {
	sink Enriched_Data_Postgres_Sink
	codec goka.Codec
	group string
	topic string
	maxBufferSize int
	interval time.Duration
}

func (s *impl_Enriched_Data_Postgres_Sink) Codec() goka.Codec {
	return s.codec
}

func (s *impl_Enriched_Data_Postgres_Sink) Group() string {
	return s.group
}

func (s *impl_Enriched_Data_Postgres_Sink) Topic() string {
	return s.topic
}

func (s *impl_Enriched_Data_Postgres_Sink) MaxBufferSize() int {
	return s.maxBufferSize
}

func (s *impl_Enriched_Data_Postgres_Sink) Interval() time.Duration {
	return s.interval
}

func (s *impl_Enriched_Data_Postgres_Sink) Flush() error {
	return s.sink.Flush()
}

func (s *impl_Enriched_Data_Postgres_Sink) Collect(ctx runner.MessageContext, key string, msg interface{}) error {
	m, ok := msg.(*testSerial.DetailsEnriched)
	if !ok {
		return errors.Errorf("expecting message of type '*testSerial.DetailsEnriched' got type '%t'", msg)
	}

	return s.sink.Collect(ctx, key, m)
}

func Register_Enriched_Data_Postgres_Sink(options runner.ServiceOptions, sink *Enriched_Data_Postgres_Sink, interval time.Duration, maxBufferSize int) (func(ctx context.Context) func(), error) {
	brokers := options.Brokers
	protoWrapper := options.ProtoWrapper

	codec, err := protoWrapper.Codec("testMesh.testSerial.detailsEnriched", &testSerial.DetailsEnriched{})
	if err != nil {
		return nil, errors.Wrap(err, "failed to create codec")
	}

	d := &impl_Enriched_Data_Postgres_Sink{
		sink: sink,
		codec: codec,
		group: "enriched_data_postgres-sink",
		topic: "testMesh.testSerial.detailsEnriched",
		maxBufferSize: maxBufferSize,
		interval: interval,
	}

	s, err := runner.NewSink(d, brokers)

	return func(ctx context.Context) func() error {
		return func() error {
			err := s.Run(ctx)
			if err != nil {
				return errors.Wrap(err, "failed to run sink")
			}

			return nil
		}
	}, nil
}
`
)
