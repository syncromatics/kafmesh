// Code generated by MockGen. DO NOT EDIT.
// Source: ./scrapeService.go

// Package services_test is a generated GoMock package.
package services_test

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	discoveryv1 "github.com/syncromatics/kafmesh/internal/protos/kafmesh/discovery/v1"
	reflect "reflect"
)

// MockScraper is a mock of Scraper interface
type MockScraper struct {
	ctrl     *gomock.Controller
	recorder *MockScraperMockRecorder
}

// MockScraperMockRecorder is the mock recorder for MockScraper
type MockScraperMockRecorder struct {
	mock *MockScraper
}

// NewMockScraper creates a new mock instance
func NewMockScraper(ctrl *gomock.Controller) *MockScraper {
	mock := &MockScraper{ctrl: ctrl}
	mock.recorder = &MockScraperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockScraper) EXPECT() *MockScraperMockRecorder {
	return m.recorder
}

// Scrape mocks base method
func (m *MockScraper) Scrape(ctx context.Context) (map[string]*discoveryv1.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scrape", ctx)
	ret0, _ := ret[0].(map[string]*discoveryv1.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Scrape indicates an expected call of Scrape
func (mr *MockScraperMockRecorder) Scrape(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scrape", reflect.TypeOf((*MockScraper)(nil).Scrape), ctx)
}
