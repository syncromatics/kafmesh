// Code generated by MockGen. DO NOT EDIT.
// Source: ./scrapeService.go

// Package services_test is a generated GoMock package.
package services_test

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	discoveryv1 "github.com/syncromatics/kafmesh/internal/protos/kafmesh/discovery/v1"
	storage "github.com/syncromatics/kafmesh/internal/storage"
	v1 "k8s.io/api/core/v1"
	reflect "reflect"
)

// MockScraper is a mock of Scraper interface
type MockScraper struct {
	ctrl     *gomock.Controller
	recorder *MockScraperMockRecorder
}

// MockScraperMockRecorder is the mock recorder for MockScraper
type MockScraperMockRecorder struct {
	mock *MockScraper
}

// NewMockScraper creates a new mock instance
func NewMockScraper(ctrl *gomock.Controller) *MockScraper {
	mock := &MockScraper{ctrl: ctrl}
	mock.recorder = &MockScraperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockScraper) EXPECT() *MockScraperMockRecorder {
	return m.recorder
}

// ScrapePod mocks base method
func (m *MockScraper) ScrapePod(ctx context.Context, pod v1.Pod) (*discoveryv1.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScrapePod", ctx, pod)
	ret0, _ := ret[0].(*discoveryv1.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScrapePod indicates an expected call of ScrapePod
func (mr *MockScraperMockRecorder) ScrapePod(ctx, pod interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScrapePod", reflect.TypeOf((*MockScraper)(nil).ScrapePod), ctx, pod)
}

// GetKafmeshPods mocks base method
func (m *MockScraper) GetKafmeshPods(ctx context.Context) ([]v1.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKafmeshPods", ctx)
	ret0, _ := ret[0].([]v1.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKafmeshPods indicates an expected call of GetKafmeshPods
func (mr *MockScraperMockRecorder) GetKafmeshPods(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKafmeshPods", reflect.TypeOf((*MockScraper)(nil).GetKafmeshPods), ctx)
}

// MockUpdater is a mock of Updater interface
type MockUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockUpdaterMockRecorder
}

// MockUpdaterMockRecorder is the mock recorder for MockUpdater
type MockUpdaterMockRecorder struct {
	mock *MockUpdater
}

// NewMockUpdater creates a new mock instance
func NewMockUpdater(ctrl *gomock.Controller) *MockUpdater {
	mock := &MockUpdater{ctrl: ctrl}
	mock.recorder = &MockUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUpdater) EXPECT() *MockUpdaterMockRecorder {
	return m.recorder
}

// Update mocks base method
func (m *MockUpdater) Update(arg0 context.Context, arg1 storage.Pod, arg2 *discoveryv1.Service) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockUpdaterMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUpdater)(nil).Update), arg0, arg1, arg2)
}

// MockDeleter is a mock of Deleter interface
type MockDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockDeleterMockRecorder
}

// MockDeleterMockRecorder is the mock recorder for MockDeleter
type MockDeleterMockRecorder struct {
	mock *MockDeleter
}

// NewMockDeleter creates a new mock instance
func NewMockDeleter(ctrl *gomock.Controller) *MockDeleter {
	mock := &MockDeleter{ctrl: ctrl}
	mock.recorder = &MockDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDeleter) EXPECT() *MockDeleterMockRecorder {
	return m.recorder
}

// Delete mocks base method
func (m *MockDeleter) Delete(arg0 context.Context, arg1 storage.Pod) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockDeleterMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDeleter)(nil).Delete), arg0, arg1)
}

// MockGetPodser is a mock of GetPodser interface
type MockGetPodser struct {
	ctrl     *gomock.Controller
	recorder *MockGetPodserMockRecorder
}

// MockGetPodserMockRecorder is the mock recorder for MockGetPodser
type MockGetPodserMockRecorder struct {
	mock *MockGetPodser
}

// NewMockGetPodser creates a new mock instance
func NewMockGetPodser(ctrl *gomock.Controller) *MockGetPodser {
	mock := &MockGetPodser{ctrl: ctrl}
	mock.recorder = &MockGetPodserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGetPodser) EXPECT() *MockGetPodserMockRecorder {
	return m.recorder
}

// GetPods mocks base method
func (m *MockGetPodser) GetPods(arg0 context.Context) (map[string]struct{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPods", arg0)
	ret0, _ := ret[0].(map[string]struct{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPods indicates an expected call of GetPods
func (mr *MockGetPodserMockRecorder) GetPods(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPods", reflect.TypeOf((*MockGetPodser)(nil).GetPods), arg0)
}
