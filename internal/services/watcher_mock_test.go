// Code generated by MockGen. DO NOT EDIT.
// Source: ./watcher.go

// Package services_test is a generated GoMock package.
package services_test

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	watchv1 "github.com/syncromatics/kafmesh/internal/protos/kafmesh/watch/v1"
	reflect "reflect"
)

// MockWatcher is a mock of Watcher interface
type MockWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockWatcherMockRecorder
}

// MockWatcherMockRecorder is the mock recorder for MockWatcher
type MockWatcherMockRecorder struct {
	mock *MockWatcher
}

// NewMockWatcher creates a new mock instance
func NewMockWatcher(ctrl *gomock.Controller) *MockWatcher {
	mock := &MockWatcher{ctrl: ctrl}
	mock.recorder = &MockWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWatcher) EXPECT() *MockWatcherMockRecorder {
	return m.recorder
}

// WatchProcessor mocks base method
func (m *MockWatcher) WatchProcessor(arg0 context.Context, arg1 *watchv1.ProcessorRequest, arg2 func(*watchv1.ProcessorResponse) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchProcessor", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// WatchProcessor indicates an expected call of WatchProcessor
func (mr *MockWatcherMockRecorder) WatchProcessor(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchProcessor", reflect.TypeOf((*MockWatcher)(nil).WatchProcessor), arg0, arg1, arg2)
}
