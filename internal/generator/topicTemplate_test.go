package generator_test

import (
	"io/ioutil"
	"path"
	"testing"

	"github.com/stretchr/testify/assert"
)

func validateTopic(tmpDir string, t *testing.T) {
	s, err := ioutil.ReadFile(path.Join(tmpDir, "internal", "kafmesh", "topics.km.go"))
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(t, expectedTopics, string(s))
}

var (
	expectedTopics = `// Code generated by kafmesh-gen. DO NOT EDIT.

package kafmesh

import (
	"context"
	"time"

	"github.com/syncromatics/kafmesh/pkg/runner"
)

var (
	topics = []runner.Topic{
		runner.Topic {
			Name:       "testMesh.details.enricher-table",
			Partitions: 10,
			Replicas:   1,
			Compact:    true,
			Retention:  86400000 * time.Millisecond,
			Segment:    43200000 * time.Millisecond,
			Create:     true,
		},
		runner.Topic {
			Name:       "testMesh.testId.test",
			Partitions: 10,
			Replicas:   1,
			Compact:    true,
			Retention:  86400000 * time.Millisecond,
			Segment:    43200000 * time.Millisecond,
			Create:     true,
		},
		runner.Topic {
			Name:       "testMesh.testId.test2",
			Partitions: 0,
			Replicas:   0,
			Compact:    false,
			Retention:  0 * time.Millisecond,
			Segment:    0 * time.Millisecond,
			Create:     false,
		},
		runner.Topic {
			Name:       "testMesh.testSerial.details",
			Partitions: 10,
			Replicas:   1,
			Compact:    false,
			Retention:  86400000 * time.Millisecond,
			Segment:    43200000 * time.Millisecond,
			Create:     true,
		},
		runner.Topic {
			Name:       "testMesh.testSerial.detailsEnriched",
			Partitions: 10,
			Replicas:   1,
			Compact:    false,
			Retention:  86400000 * time.Millisecond,
			Segment:    43200000 * time.Millisecond,
			Create:     true,
		},
	}
)

func ConfigureTopics(ctx context.Context, brokers []string) error {
	return runner.ConfigureTopics(ctx, brokers, topics)
}
`
)
