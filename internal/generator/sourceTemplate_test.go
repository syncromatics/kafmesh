package generator_test

import (
	"io/ioutil"
	"path"
	"testing"

	"github.com/stretchr/testify/assert"
)

func validateEmitter(tmpDir string, t *testing.T) {
	s, err := ioutil.ReadFile(path.Join(tmpDir, "internal", "kafmesh", "details", "testSerial_details_source.km.go"))
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(t, expectedEmitter, string(s))
}

var (
	expectedEmitter = `// Code generated by kafmesh-gen. DO NOT EDIT.

package details

import (
	"context"
	
	"github.com/burdiyan/kafkautil"
	"github.com/lovoo/goka"
	"github.com/pkg/errors"
	"github.com/syncromatics/kafmesh/pkg/runner"
	"golang.org/x/sync/errgroup"

	"test/internal/kafmesh/models/testMesh/testSerial"
)

type TestSerialDetails_Source interface {
	Emit(message TestSerialDetails_Source_Message) error
	EmitBulk(ctx context.Context, messages []TestSerialDetails_Source_Message) error
	Delete(key string) error
}

type TestSerialDetails_Source_impl struct {
	context.Context
	emitter *runner.Emitter
	metrics *runner.Metrics
}

type TestSerialDetails_Source_Message struct {
	Key string
	Value *testSerial.Details
}

type impl_TestSerialDetails_Source_Message struct {
	msg TestSerialDetails_Source_Message
}

func (m *impl_TestSerialDetails_Source_Message) Key() string {
	return m.msg.Key
}

func (m *impl_TestSerialDetails_Source_Message) Value() interface{} {
	return m.msg.Value
}

func New_TestSerialDetails_Source(service *runner.Service) (*TestSerialDetails_Source_impl, func(context.Context) func() error, error) {
	options := service.Options()
	brokers := options.Brokers
	protoWrapper := options.ProtoWrapper

	codec, err := protoWrapper.Codec("testMesh.testSerial.details", &testSerial.Details{})
	if err != nil {
		return nil, nil, errors.Wrap(err, "failed to create codec")
	}

	emitter, err := goka.NewEmitter(brokers,
		goka.Stream("testMesh.testSerial.details"),
		codec,
		goka.WithEmitterHasher(kafkautil.MurmurHasher))

	if err != nil {
		return nil, nil, errors.Wrap(err, "failed creating source")
	}

	emitterCtx, emitterCancel := context.WithCancel(context.Background())
	e := &TestSerialDetails_Source_impl{
		emitterCtx,
		runner.NewEmitter(emitter),
		service.Metrics,
	}

	return e, func(outerCtx context.Context) func() error {
		return func() error {
			cancelableCtx, cancel := context.WithCancel(outerCtx)
			defer cancel()
			grp, ctx := errgroup.WithContext(cancelableCtx)

			grp.Go(func() error {
				select {
				case <-ctx.Done():
					emitterCancel()
					return nil
				}
			})
			grp.Go(e.emitter.Watch(ctx))

			select {
			case <- ctx.Done():
				err := grp.Wait()
				return err
			}
		}
	}, nil
}

func (e *TestSerialDetails_Source_impl) Emit(message TestSerialDetails_Source_Message) error {
	err := e.emitter.Emit(message.Key, message.Value)
	if err != nil {
		e.metrics.SourceError("testMesh", "details", "testMesh.testSerial.details")
		return err
	}

	e.metrics.SourceHit("testMesh", "details", "testMesh.testSerial.details", 1)
	return nil
}

func (e *TestSerialDetails_Source_impl) EmitBulk(ctx context.Context, messages []TestSerialDetails_Source_Message) error {
	b := []runner.EmitMessage{}
	for _, m := range messages {
		b = append(b, &impl_TestSerialDetails_Source_Message{msg: m})
	}
	err := e.emitter.EmitBulk(ctx, b)
	if err != nil {
		e.metrics.SourceError("testMesh", "details", "testMesh.testSerial.details")
		return err
	}

	e.metrics.SourceHit("testMesh", "details", "testMesh.testSerial.details", len(b))
	return nil
}

func (e *TestSerialDetails_Source_impl) Delete(key string) error {
	return e.emitter.Emit(key, nil)
}
`
)
