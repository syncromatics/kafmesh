package generator_test

import (
	"io/ioutil"
	"path"
	"testing"

	"github.com/stretchr/testify/assert"
)

func validateView(tmpDir string, t *testing.T) {
	s, err := ioutil.ReadFile(path.Join(tmpDir, "internal", "kafmesh", "details", "testSerial_detailsEnriched_view.km.go"))
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(t, expectedView, string(s))
}

var (
	expectedView = `// Code generated by kafmesh-gen. DO NOT EDIT.

package details

import (
	"context"
	"os"
	"path/filepath"

	"github.com/burdiyan/kafkautil"
	"github.com/lovoo/goka"
	"github.com/lovoo/goka/storage"
	"github.com/pkg/errors"
	"github.com/syncromatics/kafmesh/pkg/runner"
	"github.com/syndtr/goleveldb/leveldb/opt"
	"golang.org/x/sync/errgroup"

	"test/internal/kafmesh/models/testMesh/testSerial"
)

type TestSerialDetailsEnriched_View interface {
	Keys() ([]string, error)
	Get(key string) (*testSerial.DetailsEnriched, error)
}

type TestSerialDetailsEnriched_View_impl struct {
	context.Context
	view *goka.View
}

func New_TestSerialDetailsEnriched_View(options runner.ServiceOptions) (*TestSerialDetailsEnriched_View_impl, func(context.Context) func() error, error) {
	brokers := options.Brokers
	protoWrapper := options.ProtoWrapper

	codec, err := protoWrapper.Codec("testMesh.testSerial.detailsEnriched", &testSerial.DetailsEnriched{})
	if err != nil {
		return nil, nil, errors.Wrap(err, "failed to create codec")
	}

	opts := &opt.Options{
		BlockCacheCapacity: opt.MiB * 1,
		WriteBuffer:        opt.MiB * 1,
	}

	path := filepath.Join("/tmp/storage", "view", "testMesh.testSerial.detailsEnriched")

	err = os.MkdirAll(path, os.ModePerm)
	if err != nil {
		return nil, nil, errors.Wrap(err, "failed to create view db directory")
	}

	builder := storage.BuilderWithOptions(path, opts)

	view, err := goka.NewView(brokers,
		goka.Table("testMesh.testSerial.detailsEnriched"),
		codec,
		goka.WithViewStorageBuilder(builder),
		goka.WithViewHasher(kafkautil.MurmurHasher),
	)
	if err != nil {
		return nil, nil, errors.Wrap(err, "failed creating view")
	}
	
	viewCtx, viewCancel := context.WithCancel(context.Background())
	v := &TestSerialDetailsEnriched_View_impl{
		viewCtx,
		view,
	}

	return v, func(outerCtx context.Context) func() error {
		return func() error {
			cancelableCtx, cancel := context.WithCancel(outerCtx)
			defer cancel()
			grp, ctx := errgroup.WithContext(cancelableCtx)

			grp.Go(func() error {
				select {
				case <-ctx.Done():
					viewCancel()
					return nil
				}
			})
			grp.Go(func() error {
				return v.view.Run(ctx)
			})
			
			select {
			case <- ctx.Done():
				err := grp.Wait()
				return err
			}
		}
	}, nil
}

func (v *TestSerialDetailsEnriched_View_impl) Keys() ([]string, error) {
	select {
	case <-v.Done():
		return nil, errors.New("context cancelled while waiting for partition to become running")
	case <-v.view.WaitRunning():
	}

	it, err := v.view.Iterator()
	if err != nil {
		return nil, errors.Wrap(err, "failed to get iterator from view")
	}
	
	keys := []string{}
	for it.Next() {
		keys = append(keys, it.Key())
	}

	return keys, nil
}

func (v *TestSerialDetailsEnriched_View_impl) Get(key string) (*testSerial.DetailsEnriched, error) {
	select {
	case <-v.Done():
		return nil, errors.New("context cancelled while waiting for partition to become running")
	case <-v.view.WaitRunning():
	}

	m, err := v.view.Get(key)
	if err != nil {
		return nil, errors.Wrap(err, "failed to get value from view")
	}

	if m == nil {
		return nil, nil
	}

	msg, ok := m.(*testSerial.DetailsEnriched)
	if !ok {
		return nil, errors.Errorf("expecting message of type '*testSerial.DetailsEnriched' got type '%t'", m)
	}

	return msg, nil
}
`
)
