// Code generated by MockGen. DO NOT EDIT.
// Source: ./job.go

// Package scraper_test is a generated GoMock package.
package scraper_test

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	discoveryv1 "github.com/syncromatics/kafmesh/internal/protos/kafmesh/discovery/v1"
	scraper "github.com/syncromatics/kafmesh/internal/scraper"
	grpc "google.golang.org/grpc"
	v1 "k8s.io/api/core/v1"
	v10 "k8s.io/apimachinery/pkg/apis/meta/v1"
	reflect "reflect"
)

// MockPodLister is a mock of PodLister interface
type MockPodLister struct {
	ctrl     *gomock.Controller
	recorder *MockPodListerMockRecorder
}

// MockPodListerMockRecorder is the mock recorder for MockPodLister
type MockPodListerMockRecorder struct {
	mock *MockPodLister
}

// NewMockPodLister creates a new mock instance
func NewMockPodLister(ctrl *gomock.Controller) *MockPodLister {
	mock := &MockPodLister{ctrl: ctrl}
	mock.recorder = &MockPodListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPodLister) EXPECT() *MockPodListerMockRecorder {
	return m.recorder
}

// List mocks base method
func (m *MockPodLister) List(arg0 context.Context, arg1 v10.ListOptions) (*v1.PodList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].(*v1.PodList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockPodListerMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPodLister)(nil).List), arg0, arg1)
}

// MockDiscoveryClient is a mock of DiscoveryClient interface
type MockDiscoveryClient struct {
	ctrl     *gomock.Controller
	recorder *MockDiscoveryClientMockRecorder
}

// MockDiscoveryClientMockRecorder is the mock recorder for MockDiscoveryClient
type MockDiscoveryClientMockRecorder struct {
	mock *MockDiscoveryClient
}

// NewMockDiscoveryClient creates a new mock instance
func NewMockDiscoveryClient(ctrl *gomock.Controller) *MockDiscoveryClient {
	mock := &MockDiscoveryClient{ctrl: ctrl}
	mock.recorder = &MockDiscoveryClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDiscoveryClient) EXPECT() *MockDiscoveryClientMockRecorder {
	return m.recorder
}

// GetServiceInfo mocks base method
func (m *MockDiscoveryClient) GetServiceInfo(arg0 context.Context, arg1 *discoveryv1.GetServiceInfoRequest, arg2 ...grpc.CallOption) (*discoveryv1.GetServiceInfoResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetServiceInfo", varargs...)
	ret0, _ := ret[0].(*discoveryv1.GetServiceInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceInfo indicates an expected call of GetServiceInfo
func (mr *MockDiscoveryClientMockRecorder) GetServiceInfo(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceInfo", reflect.TypeOf((*MockDiscoveryClient)(nil).GetServiceInfo), varargs...)
}

// MockDiscoveryFactory is a mock of DiscoveryFactory interface
type MockDiscoveryFactory struct {
	ctrl     *gomock.Controller
	recorder *MockDiscoveryFactoryMockRecorder
}

// MockDiscoveryFactoryMockRecorder is the mock recorder for MockDiscoveryFactory
type MockDiscoveryFactoryMockRecorder struct {
	mock *MockDiscoveryFactory
}

// NewMockDiscoveryFactory creates a new mock instance
func NewMockDiscoveryFactory(ctrl *gomock.Controller) *MockDiscoveryFactory {
	mock := &MockDiscoveryFactory{ctrl: ctrl}
	mock.recorder = &MockDiscoveryFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDiscoveryFactory) EXPECT() *MockDiscoveryFactoryMockRecorder {
	return m.recorder
}

// Client mocks base method
func (m *MockDiscoveryFactory) Client(arg0 context.Context, arg1 string) (scraper.DiscoveryClient, func() error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Client", arg0, arg1)
	ret0, _ := ret[0].(scraper.DiscoveryClient)
	ret1, _ := ret[1].(func() error)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Client indicates an expected call of Client
func (mr *MockDiscoveryFactoryMockRecorder) Client(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Client", reflect.TypeOf((*MockDiscoveryFactory)(nil).Client), arg0, arg1)
}
