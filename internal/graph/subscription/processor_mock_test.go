// Code generated by MockGen. DO NOT EDIT.
// Source: ./processor.go

// Package subscription_test is a generated GoMock package.
package subscription_test

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	model "github.com/syncromatics/kafmesh/internal/graph/model"
	watchv1 "github.com/syncromatics/kafmesh/internal/protos/kafmesh/watch/v1"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockWatcher is a mock of Watcher interface
type MockWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockWatcherMockRecorder
}

// MockWatcherMockRecorder is the mock recorder for MockWatcher
type MockWatcherMockRecorder struct {
	mock *MockWatcher
}

// NewMockWatcher creates a new mock instance
func NewMockWatcher(ctrl *gomock.Controller) *MockWatcher {
	mock := &MockWatcher{ctrl: ctrl}
	mock.recorder = &MockWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWatcher) EXPECT() *MockWatcherMockRecorder {
	return m.recorder
}

// Processor mocks base method
func (m *MockWatcher) Processor(ctx context.Context, in *watchv1.ProcessorRequest, opts ...grpc.CallOption) (watchv1.WatchAPI_ProcessorClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Processor", varargs...)
	ret0, _ := ret[0].(watchv1.WatchAPI_ProcessorClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Processor indicates an expected call of Processor
func (mr *MockWatcherMockRecorder) Processor(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Processor", reflect.TypeOf((*MockWatcher)(nil).Processor), varargs...)
}

// MockProcessorRepository is a mock of ProcessorRepository interface
type MockProcessorRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProcessorRepositoryMockRecorder
}

// MockProcessorRepositoryMockRecorder is the mock recorder for MockProcessorRepository
type MockProcessorRepositoryMockRecorder struct {
	mock *MockProcessorRepository
}

// NewMockProcessorRepository creates a new mock instance
func NewMockProcessorRepository(ctrl *gomock.Controller) *MockProcessorRepository {
	mock := &MockProcessorRepository{ctrl: ctrl}
	mock.recorder = &MockProcessorRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProcessorRepository) EXPECT() *MockProcessorRepositoryMockRecorder {
	return m.recorder
}

// PodsByProcessors mocks base method
func (m *MockProcessorRepository) PodsByProcessors(arg0 context.Context, arg1 []int) ([][]*model.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PodsByProcessors", arg0, arg1)
	ret0, _ := ret[0].([][]*model.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PodsByProcessors indicates an expected call of PodsByProcessors
func (mr *MockProcessorRepositoryMockRecorder) PodsByProcessors(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PodsByProcessors", reflect.TypeOf((*MockProcessorRepository)(nil).PodsByProcessors), arg0, arg1)
}

// ByID mocks base method
func (m *MockProcessorRepository) ByID(arg0 context.Context, arg1 int) (*model.Processor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ByID", arg0, arg1)
	ret0, _ := ret[0].(*model.Processor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ByID indicates an expected call of ByID
func (mr *MockProcessorRepositoryMockRecorder) ByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByID", reflect.TypeOf((*MockProcessorRepository)(nil).ByID), arg0, arg1)
}

// ComponentByProcessors mocks base method
func (m *MockProcessorRepository) ComponentByProcessors(arg0 context.Context, arg1 []int) ([]*model.Component, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComponentByProcessors", arg0, arg1)
	ret0, _ := ret[0].([]*model.Component)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ComponentByProcessors indicates an expected call of ComponentByProcessors
func (mr *MockProcessorRepositoryMockRecorder) ComponentByProcessors(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComponentByProcessors", reflect.TypeOf((*MockProcessorRepository)(nil).ComponentByProcessors), arg0, arg1)
}
