// Code generated by MockGen. DO NOT EDIT.
// Source: ./components.go

// Package loaders_test is a generated GoMock package.
package loaders_test

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	model "github.com/syncromatics/kafmesh/internal/graph/model"
	reflect "reflect"
)

// MockComponentRepository is a mock of ComponentRepository interface
type MockComponentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockComponentRepositoryMockRecorder
}

// MockComponentRepositoryMockRecorder is the mock recorder for MockComponentRepository
type MockComponentRepositoryMockRecorder struct {
	mock *MockComponentRepository
}

// NewMockComponentRepository creates a new mock instance
func NewMockComponentRepository(ctrl *gomock.Controller) *MockComponentRepository {
	mock := &MockComponentRepository{ctrl: ctrl}
	mock.recorder = &MockComponentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockComponentRepository) EXPECT() *MockComponentRepositoryMockRecorder {
	return m.recorder
}

// ServicesByComponents mocks base method
func (m *MockComponentRepository) ServicesByComponents(ctx context.Context, components []int) ([]*model.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServicesByComponents", ctx, components)
	ret0, _ := ret[0].([]*model.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServicesByComponents indicates an expected call of ServicesByComponents
func (mr *MockComponentRepositoryMockRecorder) ServicesByComponents(ctx, components interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServicesByComponents", reflect.TypeOf((*MockComponentRepository)(nil).ServicesByComponents), ctx, components)
}

// ProcessorsByComponents mocks base method
func (m *MockComponentRepository) ProcessorsByComponents(ctx context.Context, components []int) ([][]*model.Processor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessorsByComponents", ctx, components)
	ret0, _ := ret[0].([][]*model.Processor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessorsByComponents indicates an expected call of ProcessorsByComponents
func (mr *MockComponentRepositoryMockRecorder) ProcessorsByComponents(ctx, components interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessorsByComponents", reflect.TypeOf((*MockComponentRepository)(nil).ProcessorsByComponents), ctx, components)
}

// SinksByComponents mocks base method
func (m *MockComponentRepository) SinksByComponents(ctx context.Context, components []int) ([][]*model.Sink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SinksByComponents", ctx, components)
	ret0, _ := ret[0].([][]*model.Sink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SinksByComponents indicates an expected call of SinksByComponents
func (mr *MockComponentRepositoryMockRecorder) SinksByComponents(ctx, components interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SinksByComponents", reflect.TypeOf((*MockComponentRepository)(nil).SinksByComponents), ctx, components)
}

// SourcesByComponents mocks base method
func (m *MockComponentRepository) SourcesByComponents(ctx context.Context, components []int) ([][]*model.Source, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SourcesByComponents", ctx, components)
	ret0, _ := ret[0].([][]*model.Source)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SourcesByComponents indicates an expected call of SourcesByComponents
func (mr *MockComponentRepositoryMockRecorder) SourcesByComponents(ctx, components interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SourcesByComponents", reflect.TypeOf((*MockComponentRepository)(nil).SourcesByComponents), ctx, components)
}

// ViewSinksByComponents mocks base method
func (m *MockComponentRepository) ViewSinksByComponents(ctx context.Context, components []int) ([][]*model.ViewSink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewSinksByComponents", ctx, components)
	ret0, _ := ret[0].([][]*model.ViewSink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewSinksByComponents indicates an expected call of ViewSinksByComponents
func (mr *MockComponentRepositoryMockRecorder) ViewSinksByComponents(ctx, components interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewSinksByComponents", reflect.TypeOf((*MockComponentRepository)(nil).ViewSinksByComponents), ctx, components)
}

// ViewSourcesByComponents mocks base method
func (m *MockComponentRepository) ViewSourcesByComponents(ctx context.Context, components []int) ([][]*model.ViewSource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewSourcesByComponents", ctx, components)
	ret0, _ := ret[0].([][]*model.ViewSource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewSourcesByComponents indicates an expected call of ViewSourcesByComponents
func (mr *MockComponentRepositoryMockRecorder) ViewSourcesByComponents(ctx, components interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewSourcesByComponents", reflect.TypeOf((*MockComponentRepository)(nil).ViewSourcesByComponents), ctx, components)
}

// ViewsByComponents mocks base method
func (m *MockComponentRepository) ViewsByComponents(ctx context.Context, components []int) ([][]*model.View, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewsByComponents", ctx, components)
	ret0, _ := ret[0].([][]*model.View)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewsByComponents indicates an expected call of ViewsByComponents
func (mr *MockComponentRepositoryMockRecorder) ViewsByComponents(ctx, components interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewsByComponents", reflect.TypeOf((*MockComponentRepository)(nil).ViewsByComponents), ctx, components)
}

// DependsOn mocks base method
func (m *MockComponentRepository) DependsOn(arg0 context.Context, arg1 []int) ([][]*model.Component, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DependsOn", arg0, arg1)
	ret0, _ := ret[0].([][]*model.Component)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DependsOn indicates an expected call of DependsOn
func (mr *MockComponentRepositoryMockRecorder) DependsOn(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DependsOn", reflect.TypeOf((*MockComponentRepository)(nil).DependsOn), arg0, arg1)
}
