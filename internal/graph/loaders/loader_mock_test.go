// Code generated by MockGen. DO NOT EDIT.
// Source: ./loader.go

// Package loaders_test is a generated GoMock package.
package loaders_test

import (
	gomock "github.com/golang/mock/gomock"
	loaders "github.com/syncromatics/kafmesh/internal/graph/loaders"
	reflect "reflect"
)

// MockRepositories is a mock of Repositories interface
type MockRepositories struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoriesMockRecorder
}

// MockRepositoriesMockRecorder is the mock recorder for MockRepositories
type MockRepositoriesMockRecorder struct {
	mock *MockRepositories
}

// NewMockRepositories creates a new mock instance
func NewMockRepositories(ctrl *gomock.Controller) *MockRepositories {
	mock := &MockRepositories{ctrl: ctrl}
	mock.recorder = &MockRepositoriesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepositories) EXPECT() *MockRepositoriesMockRecorder {
	return m.recorder
}

// Component mocks base method
func (m *MockRepositories) Component() loaders.ComponentRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Component")
	ret0, _ := ret[0].(loaders.ComponentRepository)
	return ret0
}

// Component indicates an expected call of Component
func (mr *MockRepositoriesMockRecorder) Component() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Component", reflect.TypeOf((*MockRepositories)(nil).Component))
}

// Service mocks base method
func (m *MockRepositories) Service() loaders.ServiceRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Service")
	ret0, _ := ret[0].(loaders.ServiceRepository)
	return ret0
}

// Service indicates an expected call of Service
func (mr *MockRepositoriesMockRecorder) Service() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Service", reflect.TypeOf((*MockRepositories)(nil).Service))
}

// Processor mocks base method
func (m *MockRepositories) Processor() loaders.ProcessorRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Processor")
	ret0, _ := ret[0].(loaders.ProcessorRepository)
	return ret0
}

// Processor indicates an expected call of Processor
func (mr *MockRepositoriesMockRecorder) Processor() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Processor", reflect.TypeOf((*MockRepositories)(nil).Processor))
}

// ProcessorInput mocks base method
func (m *MockRepositories) ProcessorInput() loaders.ProcessorInputRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessorInput")
	ret0, _ := ret[0].(loaders.ProcessorInputRepository)
	return ret0
}

// ProcessorInput indicates an expected call of ProcessorInput
func (mr *MockRepositoriesMockRecorder) ProcessorInput() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessorInput", reflect.TypeOf((*MockRepositories)(nil).ProcessorInput))
}

// ProcessorJoin mocks base method
func (m *MockRepositories) ProcessorJoin() loaders.ProcessorJoinRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessorJoin")
	ret0, _ := ret[0].(loaders.ProcessorJoinRepository)
	return ret0
}

// ProcessorJoin indicates an expected call of ProcessorJoin
func (mr *MockRepositoriesMockRecorder) ProcessorJoin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessorJoin", reflect.TypeOf((*MockRepositories)(nil).ProcessorJoin))
}

// ProcessorLookup mocks base method
func (m *MockRepositories) ProcessorLookup() loaders.ProcessorLookupRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessorLookup")
	ret0, _ := ret[0].(loaders.ProcessorLookupRepository)
	return ret0
}

// ProcessorLookup indicates an expected call of ProcessorLookup
func (mr *MockRepositoriesMockRecorder) ProcessorLookup() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessorLookup", reflect.TypeOf((*MockRepositories)(nil).ProcessorLookup))
}

// ProcessorOutput mocks base method
func (m *MockRepositories) ProcessorOutput() loaders.ProcessorOutputRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessorOutput")
	ret0, _ := ret[0].(loaders.ProcessorOutputRepository)
	return ret0
}

// ProcessorOutput indicates an expected call of ProcessorOutput
func (mr *MockRepositoriesMockRecorder) ProcessorOutput() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessorOutput", reflect.TypeOf((*MockRepositories)(nil).ProcessorOutput))
}

// Sink mocks base method
func (m *MockRepositories) Sink() loaders.SinkRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sink")
	ret0, _ := ret[0].(loaders.SinkRepository)
	return ret0
}

// Sink indicates an expected call of Sink
func (mr *MockRepositoriesMockRecorder) Sink() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sink", reflect.TypeOf((*MockRepositories)(nil).Sink))
}

// Source mocks base method
func (m *MockRepositories) Source() loaders.SourceRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Source")
	ret0, _ := ret[0].(loaders.SourceRepository)
	return ret0
}

// Source indicates an expected call of Source
func (mr *MockRepositoriesMockRecorder) Source() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Source", reflect.TypeOf((*MockRepositories)(nil).Source))
}

// ViewSink mocks base method
func (m *MockRepositories) ViewSink() loaders.ViewSinkRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewSink")
	ret0, _ := ret[0].(loaders.ViewSinkRepository)
	return ret0
}

// ViewSink indicates an expected call of ViewSink
func (mr *MockRepositoriesMockRecorder) ViewSink() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewSink", reflect.TypeOf((*MockRepositories)(nil).ViewSink))
}

// ViewSource mocks base method
func (m *MockRepositories) ViewSource() loaders.ViewSourceRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewSource")
	ret0, _ := ret[0].(loaders.ViewSourceRepository)
	return ret0
}

// ViewSource indicates an expected call of ViewSource
func (mr *MockRepositoriesMockRecorder) ViewSource() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewSource", reflect.TypeOf((*MockRepositories)(nil).ViewSource))
}

// View mocks base method
func (m *MockRepositories) View() loaders.ViewRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "View")
	ret0, _ := ret[0].(loaders.ViewRepository)
	return ret0
}

// View indicates an expected call of View
func (mr *MockRepositoriesMockRecorder) View() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "View", reflect.TypeOf((*MockRepositories)(nil).View))
}

// Pod mocks base method
func (m *MockRepositories) Pod() loaders.PodRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pod")
	ret0, _ := ret[0].(loaders.PodRepository)
	return ret0
}

// Pod indicates an expected call of Pod
func (mr *MockRepositoriesMockRecorder) Pod() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pod", reflect.TypeOf((*MockRepositories)(nil).Pod))
}

// Topic mocks base method
func (m *MockRepositories) Topic() loaders.TopicRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Topic")
	ret0, _ := ret[0].(loaders.TopicRepository)
	return ret0
}

// Topic indicates an expected call of Topic
func (mr *MockRepositoriesMockRecorder) Topic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Topic", reflect.TypeOf((*MockRepositories)(nil).Topic))
}

// Query mocks base method
func (m *MockRepositories) Query() loaders.QueryRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query")
	ret0, _ := ret[0].(loaders.QueryRepository)
	return ret0
}

// Query indicates an expected call of Query
func (mr *MockRepositoriesMockRecorder) Query() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockRepositories)(nil).Query))
}
