// Code generated by MockGen. DO NOT EDIT.
// Source: ./topics.go

// Package loaders_test is a generated GoMock package.
package loaders_test

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	model "github.com/syncromatics/kafmesh/internal/graph/model"
	reflect "reflect"
)

// MockTopicRepository is a mock of TopicRepository interface
type MockTopicRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTopicRepositoryMockRecorder
}

// MockTopicRepositoryMockRecorder is the mock recorder for MockTopicRepository
type MockTopicRepositoryMockRecorder struct {
	mock *MockTopicRepository
}

// NewMockTopicRepository creates a new mock instance
func NewMockTopicRepository(ctrl *gomock.Controller) *MockTopicRepository {
	mock := &MockTopicRepository{ctrl: ctrl}
	mock.recorder = &MockTopicRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTopicRepository) EXPECT() *MockTopicRepositoryMockRecorder {
	return m.recorder
}

// ProcessorInputsByTopics mocks base method
func (m *MockTopicRepository) ProcessorInputsByTopics(ctx context.Context, topics []int) ([][]*model.ProcessorInput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessorInputsByTopics", ctx, topics)
	ret0, _ := ret[0].([][]*model.ProcessorInput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessorInputsByTopics indicates an expected call of ProcessorInputsByTopics
func (mr *MockTopicRepositoryMockRecorder) ProcessorInputsByTopics(ctx, topics interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessorInputsByTopics", reflect.TypeOf((*MockTopicRepository)(nil).ProcessorInputsByTopics), ctx, topics)
}

// ProcessorJoinsByTopics mocks base method
func (m *MockTopicRepository) ProcessorJoinsByTopics(ctx context.Context, topics []int) ([][]*model.ProcessorJoin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessorJoinsByTopics", ctx, topics)
	ret0, _ := ret[0].([][]*model.ProcessorJoin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessorJoinsByTopics indicates an expected call of ProcessorJoinsByTopics
func (mr *MockTopicRepositoryMockRecorder) ProcessorJoinsByTopics(ctx, topics interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessorJoinsByTopics", reflect.TypeOf((*MockTopicRepository)(nil).ProcessorJoinsByTopics), ctx, topics)
}

// ProcessorLookupsByTopics mocks base method
func (m *MockTopicRepository) ProcessorLookupsByTopics(ctx context.Context, topics []int) ([][]*model.ProcessorLookup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessorLookupsByTopics", ctx, topics)
	ret0, _ := ret[0].([][]*model.ProcessorLookup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessorLookupsByTopics indicates an expected call of ProcessorLookupsByTopics
func (mr *MockTopicRepositoryMockRecorder) ProcessorLookupsByTopics(ctx, topics interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessorLookupsByTopics", reflect.TypeOf((*MockTopicRepository)(nil).ProcessorLookupsByTopics), ctx, topics)
}

// ProcessorOutputsByTopics mocks base method
func (m *MockTopicRepository) ProcessorOutputsByTopics(ctx context.Context, topics []int) ([][]*model.ProcessorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessorOutputsByTopics", ctx, topics)
	ret0, _ := ret[0].([][]*model.ProcessorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessorOutputsByTopics indicates an expected call of ProcessorOutputsByTopics
func (mr *MockTopicRepositoryMockRecorder) ProcessorOutputsByTopics(ctx, topics interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessorOutputsByTopics", reflect.TypeOf((*MockTopicRepository)(nil).ProcessorOutputsByTopics), ctx, topics)
}

// ProcessorPersistencesByTopics mocks base method
func (m *MockTopicRepository) ProcessorPersistencesByTopics(ctx context.Context, topics []int) ([][]*model.Processor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessorPersistencesByTopics", ctx, topics)
	ret0, _ := ret[0].([][]*model.Processor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessorPersistencesByTopics indicates an expected call of ProcessorPersistencesByTopics
func (mr *MockTopicRepositoryMockRecorder) ProcessorPersistencesByTopics(ctx, topics interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessorPersistencesByTopics", reflect.TypeOf((*MockTopicRepository)(nil).ProcessorPersistencesByTopics), ctx, topics)
}

// SinksByTopics mocks base method
func (m *MockTopicRepository) SinksByTopics(ctx context.Context, topics []int) ([][]*model.Sink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SinksByTopics", ctx, topics)
	ret0, _ := ret[0].([][]*model.Sink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SinksByTopics indicates an expected call of SinksByTopics
func (mr *MockTopicRepositoryMockRecorder) SinksByTopics(ctx, topics interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SinksByTopics", reflect.TypeOf((*MockTopicRepository)(nil).SinksByTopics), ctx, topics)
}

// SourcesByTopics mocks base method
func (m *MockTopicRepository) SourcesByTopics(ctx context.Context, topics []int) ([][]*model.Source, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SourcesByTopics", ctx, topics)
	ret0, _ := ret[0].([][]*model.Source)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SourcesByTopics indicates an expected call of SourcesByTopics
func (mr *MockTopicRepositoryMockRecorder) SourcesByTopics(ctx, topics interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SourcesByTopics", reflect.TypeOf((*MockTopicRepository)(nil).SourcesByTopics), ctx, topics)
}

// ViewSinksByTopics mocks base method
func (m *MockTopicRepository) ViewSinksByTopics(ctx context.Context, topics []int) ([][]*model.ViewSink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewSinksByTopics", ctx, topics)
	ret0, _ := ret[0].([][]*model.ViewSink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewSinksByTopics indicates an expected call of ViewSinksByTopics
func (mr *MockTopicRepositoryMockRecorder) ViewSinksByTopics(ctx, topics interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewSinksByTopics", reflect.TypeOf((*MockTopicRepository)(nil).ViewSinksByTopics), ctx, topics)
}

// ViewSourcesByTopics mocks base method
func (m *MockTopicRepository) ViewSourcesByTopics(ctx context.Context, topics []int) ([][]*model.ViewSource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewSourcesByTopics", ctx, topics)
	ret0, _ := ret[0].([][]*model.ViewSource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewSourcesByTopics indicates an expected call of ViewSourcesByTopics
func (mr *MockTopicRepositoryMockRecorder) ViewSourcesByTopics(ctx, topics interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewSourcesByTopics", reflect.TypeOf((*MockTopicRepository)(nil).ViewSourcesByTopics), ctx, topics)
}

// ViewsByTopics mocks base method
func (m *MockTopicRepository) ViewsByTopics(ctx context.Context, topics []int) ([][]*model.View, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewsByTopics", ctx, topics)
	ret0, _ := ret[0].([][]*model.View)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewsByTopics indicates an expected call of ViewsByTopics
func (mr *MockTopicRepositoryMockRecorder) ViewsByTopics(ctx, topics interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewsByTopics", reflect.TypeOf((*MockTopicRepository)(nil).ViewsByTopics), ctx, topics)
}
