// Code generated by MockGen. DO NOT EDIT.
// Source: ./processorLookups.go

// Package loaders_test is a generated GoMock package.
package loaders_test

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	model "github.com/syncromatics/kafmesh/internal/graph/model"
	reflect "reflect"
)

// MockProcessorLookupRepository is a mock of ProcessorLookupRepository interface
type MockProcessorLookupRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProcessorLookupRepositoryMockRecorder
}

// MockProcessorLookupRepositoryMockRecorder is the mock recorder for MockProcessorLookupRepository
type MockProcessorLookupRepositoryMockRecorder struct {
	mock *MockProcessorLookupRepository
}

// NewMockProcessorLookupRepository creates a new mock instance
func NewMockProcessorLookupRepository(ctrl *gomock.Controller) *MockProcessorLookupRepository {
	mock := &MockProcessorLookupRepository{ctrl: ctrl}
	mock.recorder = &MockProcessorLookupRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProcessorLookupRepository) EXPECT() *MockProcessorLookupRepositoryMockRecorder {
	return m.recorder
}

// ProcessorByLookups mocks base method
func (m *MockProcessorLookupRepository) ProcessorByLookups(ctx context.Context, lookups []int) ([]*model.Processor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessorByLookups", ctx, lookups)
	ret0, _ := ret[0].([]*model.Processor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessorByLookups indicates an expected call of ProcessorByLookups
func (mr *MockProcessorLookupRepositoryMockRecorder) ProcessorByLookups(ctx, lookups interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessorByLookups", reflect.TypeOf((*MockProcessorLookupRepository)(nil).ProcessorByLookups), ctx, lookups)
}

// TopicByLookups mocks base method
func (m *MockProcessorLookupRepository) TopicByLookups(ctx context.Context, lookups []int) ([]*model.Topic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TopicByLookups", ctx, lookups)
	ret0, _ := ret[0].([]*model.Topic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TopicByLookups indicates an expected call of TopicByLookups
func (mr *MockProcessorLookupRepositoryMockRecorder) TopicByLookups(ctx, lookups interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TopicByLookups", reflect.TypeOf((*MockProcessorLookupRepository)(nil).TopicByLookups), ctx, lookups)
}
