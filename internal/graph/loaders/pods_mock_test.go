// Code generated by MockGen. DO NOT EDIT.
// Source: ./pods.go

// Package loaders_test is a generated GoMock package.
package loaders_test

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	model "github.com/syncromatics/kafmesh/internal/graph/model"
	reflect "reflect"
)

// MockPodRepository is a mock of PodRepository interface
type MockPodRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPodRepositoryMockRecorder
}

// MockPodRepositoryMockRecorder is the mock recorder for MockPodRepository
type MockPodRepositoryMockRecorder struct {
	mock *MockPodRepository
}

// NewMockPodRepository creates a new mock instance
func NewMockPodRepository(ctrl *gomock.Controller) *MockPodRepository {
	mock := &MockPodRepository{ctrl: ctrl}
	mock.recorder = &MockPodRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPodRepository) EXPECT() *MockPodRepositoryMockRecorder {
	return m.recorder
}

// ProcessorsByPods mocks base method
func (m *MockPodRepository) ProcessorsByPods(arg0 context.Context, arg1 []int) ([][]*model.Processor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessorsByPods", arg0, arg1)
	ret0, _ := ret[0].([][]*model.Processor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessorsByPods indicates an expected call of ProcessorsByPods
func (mr *MockPodRepositoryMockRecorder) ProcessorsByPods(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessorsByPods", reflect.TypeOf((*MockPodRepository)(nil).ProcessorsByPods), arg0, arg1)
}

// SinksByPods mocks base method
func (m *MockPodRepository) SinksByPods(arg0 context.Context, arg1 []int) ([][]*model.Sink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SinksByPods", arg0, arg1)
	ret0, _ := ret[0].([][]*model.Sink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SinksByPods indicates an expected call of SinksByPods
func (mr *MockPodRepositoryMockRecorder) SinksByPods(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SinksByPods", reflect.TypeOf((*MockPodRepository)(nil).SinksByPods), arg0, arg1)
}

// SourcesByPods mocks base method
func (m *MockPodRepository) SourcesByPods(ctx context.Context, pods []int) ([][]*model.Source, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SourcesByPods", ctx, pods)
	ret0, _ := ret[0].([][]*model.Source)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SourcesByPods indicates an expected call of SourcesByPods
func (mr *MockPodRepositoryMockRecorder) SourcesByPods(ctx, pods interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SourcesByPods", reflect.TypeOf((*MockPodRepository)(nil).SourcesByPods), ctx, pods)
}

// ViewSinksByPods mocks base method
func (m *MockPodRepository) ViewSinksByPods(ctx context.Context, pods []int) ([][]*model.ViewSink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewSinksByPods", ctx, pods)
	ret0, _ := ret[0].([][]*model.ViewSink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewSinksByPods indicates an expected call of ViewSinksByPods
func (mr *MockPodRepositoryMockRecorder) ViewSinksByPods(ctx, pods interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewSinksByPods", reflect.TypeOf((*MockPodRepository)(nil).ViewSinksByPods), ctx, pods)
}

// ViewSourcesByPods mocks base method
func (m *MockPodRepository) ViewSourcesByPods(ctx context.Context, pods []int) ([][]*model.ViewSource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewSourcesByPods", ctx, pods)
	ret0, _ := ret[0].([][]*model.ViewSource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewSourcesByPods indicates an expected call of ViewSourcesByPods
func (mr *MockPodRepositoryMockRecorder) ViewSourcesByPods(ctx, pods interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewSourcesByPods", reflect.TypeOf((*MockPodRepository)(nil).ViewSourcesByPods), ctx, pods)
}

// ViewsByPods mocks base method
func (m *MockPodRepository) ViewsByPods(ctx context.Context, pods []int) ([][]*model.View, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewsByPods", ctx, pods)
	ret0, _ := ret[0].([][]*model.View)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewsByPods indicates an expected call of ViewsByPods
func (mr *MockPodRepositoryMockRecorder) ViewsByPods(ctx, pods interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewsByPods", reflect.TypeOf((*MockPodRepository)(nil).ViewsByPods), ctx, pods)
}
