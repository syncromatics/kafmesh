// Code generated by MockGen. DO NOT EDIT.
// Source: ./services.go

// Package loaders_test is a generated GoMock package.
package loaders_test

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	model "github.com/syncromatics/kafmesh/internal/graph/model"
	reflect "reflect"
)

// MockServiceRepository is a mock of ServiceRepository interface
type MockServiceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockServiceRepositoryMockRecorder
}

// MockServiceRepositoryMockRecorder is the mock recorder for MockServiceRepository
type MockServiceRepositoryMockRecorder struct {
	mock *MockServiceRepository
}

// NewMockServiceRepository creates a new mock instance
func NewMockServiceRepository(ctrl *gomock.Controller) *MockServiceRepository {
	mock := &MockServiceRepository{ctrl: ctrl}
	mock.recorder = &MockServiceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServiceRepository) EXPECT() *MockServiceRepositoryMockRecorder {
	return m.recorder
}

// ComponentsByServices mocks base method
func (m *MockServiceRepository) ComponentsByServices(ctx context.Context, services []int) ([][]*model.Component, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComponentsByServices", ctx, services)
	ret0, _ := ret[0].([][]*model.Component)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ComponentsByServices indicates an expected call of ComponentsByServices
func (mr *MockServiceRepositoryMockRecorder) ComponentsByServices(ctx, services interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComponentsByServices", reflect.TypeOf((*MockServiceRepository)(nil).ComponentsByServices), ctx, services)
}

// DependsOn mocks base method
func (m *MockServiceRepository) DependsOn(arg0 context.Context, arg1 []int) ([][]*model.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DependsOn", arg0, arg1)
	ret0, _ := ret[0].([][]*model.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DependsOn indicates an expected call of DependsOn
func (mr *MockServiceRepositoryMockRecorder) DependsOn(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DependsOn", reflect.TypeOf((*MockServiceRepository)(nil).DependsOn), arg0, arg1)
}
