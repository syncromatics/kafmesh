// Code generated by MockGen. DO NOT EDIT.
// Source: ./viewSources.go

// Package loaders_test is a generated GoMock package.
package loaders_test

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	model "github.com/syncromatics/kafmesh/internal/graph/model"
	reflect "reflect"
)

// MockViewSourceRepository is a mock of ViewSourceRepository interface
type MockViewSourceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockViewSourceRepositoryMockRecorder
}

// MockViewSourceRepositoryMockRecorder is the mock recorder for MockViewSourceRepository
type MockViewSourceRepositoryMockRecorder struct {
	mock *MockViewSourceRepository
}

// NewMockViewSourceRepository creates a new mock instance
func NewMockViewSourceRepository(ctrl *gomock.Controller) *MockViewSourceRepository {
	mock := &MockViewSourceRepository{ctrl: ctrl}
	mock.recorder = &MockViewSourceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockViewSourceRepository) EXPECT() *MockViewSourceRepositoryMockRecorder {
	return m.recorder
}

// ComponentByViewSources mocks base method
func (m *MockViewSourceRepository) ComponentByViewSources(ctx context.Context, viewSources []int) ([]*model.Component, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComponentByViewSources", ctx, viewSources)
	ret0, _ := ret[0].([]*model.Component)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ComponentByViewSources indicates an expected call of ComponentByViewSources
func (mr *MockViewSourceRepositoryMockRecorder) ComponentByViewSources(ctx, viewSources interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComponentByViewSources", reflect.TypeOf((*MockViewSourceRepository)(nil).ComponentByViewSources), ctx, viewSources)
}

// PodsByViewSources mocks base method
func (m *MockViewSourceRepository) PodsByViewSources(ctx context.Context, viewSources []int) ([][]*model.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PodsByViewSources", ctx, viewSources)
	ret0, _ := ret[0].([][]*model.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PodsByViewSources indicates an expected call of PodsByViewSources
func (mr *MockViewSourceRepositoryMockRecorder) PodsByViewSources(ctx, viewSources interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PodsByViewSources", reflect.TypeOf((*MockViewSourceRepository)(nil).PodsByViewSources), ctx, viewSources)
}

// TopicByViewSources mocks base method
func (m *MockViewSourceRepository) TopicByViewSources(ctx context.Context, viewSources []int) ([]*model.Topic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TopicByViewSources", ctx, viewSources)
	ret0, _ := ret[0].([]*model.Topic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TopicByViewSources indicates an expected call of TopicByViewSources
func (mr *MockViewSourceRepositoryMockRecorder) TopicByViewSources(ctx, viewSources interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TopicByViewSources", reflect.TypeOf((*MockViewSourceRepository)(nil).TopicByViewSources), ctx, viewSources)
}
