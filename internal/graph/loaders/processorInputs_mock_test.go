// Code generated by MockGen. DO NOT EDIT.
// Source: ./processorInputs.go

// Package loaders_test is a generated GoMock package.
package loaders_test

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	model "github.com/syncromatics/kafmesh/internal/graph/model"
	reflect "reflect"
)

// MockProcessorInputRepository is a mock of ProcessorInputRepository interface
type MockProcessorInputRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProcessorInputRepositoryMockRecorder
}

// MockProcessorInputRepositoryMockRecorder is the mock recorder for MockProcessorInputRepository
type MockProcessorInputRepositoryMockRecorder struct {
	mock *MockProcessorInputRepository
}

// NewMockProcessorInputRepository creates a new mock instance
func NewMockProcessorInputRepository(ctrl *gomock.Controller) *MockProcessorInputRepository {
	mock := &MockProcessorInputRepository{ctrl: ctrl}
	mock.recorder = &MockProcessorInputRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProcessorInputRepository) EXPECT() *MockProcessorInputRepositoryMockRecorder {
	return m.recorder
}

// ProcessorByInputs mocks base method
func (m *MockProcessorInputRepository) ProcessorByInputs(arg0 context.Context, arg1 []int) ([]*model.Processor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessorByInputs", arg0, arg1)
	ret0, _ := ret[0].([]*model.Processor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessorByInputs indicates an expected call of ProcessorByInputs
func (mr *MockProcessorInputRepositoryMockRecorder) ProcessorByInputs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessorByInputs", reflect.TypeOf((*MockProcessorInputRepository)(nil).ProcessorByInputs), arg0, arg1)
}

// TopicByInputs mocks base method
func (m *MockProcessorInputRepository) TopicByInputs(arg0 context.Context, arg1 []int) ([]*model.Topic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TopicByInputs", arg0, arg1)
	ret0, _ := ret[0].([]*model.Topic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TopicByInputs indicates an expected call of TopicByInputs
func (mr *MockProcessorInputRepositoryMockRecorder) TopicByInputs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TopicByInputs", reflect.TypeOf((*MockProcessorInputRepository)(nil).TopicByInputs), arg0, arg1)
}
