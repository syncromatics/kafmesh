// Code generated by MockGen. DO NOT EDIT.
// Source: ./viewSinks.go

// Package loaders_test is a generated GoMock package.
package loaders_test

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	model "github.com/syncromatics/kafmesh/internal/graph/model"
	reflect "reflect"
)

// MockViewSinkRepository is a mock of ViewSinkRepository interface
type MockViewSinkRepository struct {
	ctrl     *gomock.Controller
	recorder *MockViewSinkRepositoryMockRecorder
}

// MockViewSinkRepositoryMockRecorder is the mock recorder for MockViewSinkRepository
type MockViewSinkRepositoryMockRecorder struct {
	mock *MockViewSinkRepository
}

// NewMockViewSinkRepository creates a new mock instance
func NewMockViewSinkRepository(ctrl *gomock.Controller) *MockViewSinkRepository {
	mock := &MockViewSinkRepository{ctrl: ctrl}
	mock.recorder = &MockViewSinkRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockViewSinkRepository) EXPECT() *MockViewSinkRepositoryMockRecorder {
	return m.recorder
}

// ComponentByViewSinks mocks base method
func (m *MockViewSinkRepository) ComponentByViewSinks(ctx context.Context, viewSinks []int) ([]*model.Component, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComponentByViewSinks", ctx, viewSinks)
	ret0, _ := ret[0].([]*model.Component)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ComponentByViewSinks indicates an expected call of ComponentByViewSinks
func (mr *MockViewSinkRepositoryMockRecorder) ComponentByViewSinks(ctx, viewSinks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComponentByViewSinks", reflect.TypeOf((*MockViewSinkRepository)(nil).ComponentByViewSinks), ctx, viewSinks)
}

// PodsByViewSinks mocks base method
func (m *MockViewSinkRepository) PodsByViewSinks(ctx context.Context, viewSinks []int) ([][]*model.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PodsByViewSinks", ctx, viewSinks)
	ret0, _ := ret[0].([][]*model.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PodsByViewSinks indicates an expected call of PodsByViewSinks
func (mr *MockViewSinkRepositoryMockRecorder) PodsByViewSinks(ctx, viewSinks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PodsByViewSinks", reflect.TypeOf((*MockViewSinkRepository)(nil).PodsByViewSinks), ctx, viewSinks)
}

// TopicByViewSinks mocks base method
func (m *MockViewSinkRepository) TopicByViewSinks(ctx context.Context, viewSinks []int) ([]*model.Topic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TopicByViewSinks", ctx, viewSinks)
	ret0, _ := ret[0].([]*model.Topic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TopicByViewSinks indicates an expected call of TopicByViewSinks
func (mr *MockViewSinkRepositoryMockRecorder) TopicByViewSinks(ctx, viewSinks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TopicByViewSinks", reflect.TypeOf((*MockViewSinkRepository)(nil).TopicByViewSinks), ctx, viewSinks)
}
