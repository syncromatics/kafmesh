// Code generated by MockGen. DO NOT EDIT.
// Source: ./processorOutputs.go

// Package loaders_test is a generated GoMock package.
package loaders_test

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	model "github.com/syncromatics/kafmesh/internal/graph/model"
	reflect "reflect"
)

// MockProcessorOutputRepository is a mock of ProcessorOutputRepository interface
type MockProcessorOutputRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProcessorOutputRepositoryMockRecorder
}

// MockProcessorOutputRepositoryMockRecorder is the mock recorder for MockProcessorOutputRepository
type MockProcessorOutputRepositoryMockRecorder struct {
	mock *MockProcessorOutputRepository
}

// NewMockProcessorOutputRepository creates a new mock instance
func NewMockProcessorOutputRepository(ctrl *gomock.Controller) *MockProcessorOutputRepository {
	mock := &MockProcessorOutputRepository{ctrl: ctrl}
	mock.recorder = &MockProcessorOutputRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProcessorOutputRepository) EXPECT() *MockProcessorOutputRepositoryMockRecorder {
	return m.recorder
}

// ProcessorByOutputs mocks base method
func (m *MockProcessorOutputRepository) ProcessorByOutputs(ctx context.Context, outputs []int) ([]*model.Processor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessorByOutputs", ctx, outputs)
	ret0, _ := ret[0].([]*model.Processor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessorByOutputs indicates an expected call of ProcessorByOutputs
func (mr *MockProcessorOutputRepositoryMockRecorder) ProcessorByOutputs(ctx, outputs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessorByOutputs", reflect.TypeOf((*MockProcessorOutputRepository)(nil).ProcessorByOutputs), ctx, outputs)
}

// TopicByOutputs mocks base method
func (m *MockProcessorOutputRepository) TopicByOutputs(ctx context.Context, outputs []int) ([]*model.Topic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TopicByOutputs", ctx, outputs)
	ret0, _ := ret[0].([]*model.Topic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TopicByOutputs indicates an expected call of TopicByOutputs
func (mr *MockProcessorOutputRepositoryMockRecorder) TopicByOutputs(ctx, outputs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TopicByOutputs", reflect.TypeOf((*MockProcessorOutputRepository)(nil).TopicByOutputs), ctx, outputs)
}
