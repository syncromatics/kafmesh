// Code generated by MockGen. DO NOT EDIT.
// Source: ./views.go

// Package loaders_test is a generated GoMock package.
package loaders_test

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	model "github.com/syncromatics/kafmesh/internal/graph/model"
	reflect "reflect"
)

// MockViewRepository is a mock of ViewRepository interface
type MockViewRepository struct {
	ctrl     *gomock.Controller
	recorder *MockViewRepositoryMockRecorder
}

// MockViewRepositoryMockRecorder is the mock recorder for MockViewRepository
type MockViewRepositoryMockRecorder struct {
	mock *MockViewRepository
}

// NewMockViewRepository creates a new mock instance
func NewMockViewRepository(ctrl *gomock.Controller) *MockViewRepository {
	mock := &MockViewRepository{ctrl: ctrl}
	mock.recorder = &MockViewRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockViewRepository) EXPECT() *MockViewRepositoryMockRecorder {
	return m.recorder
}

// ComponentByViews mocks base method
func (m *MockViewRepository) ComponentByViews(ctx context.Context, views []int) ([]*model.Component, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComponentByViews", ctx, views)
	ret0, _ := ret[0].([]*model.Component)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ComponentByViews indicates an expected call of ComponentByViews
func (mr *MockViewRepositoryMockRecorder) ComponentByViews(ctx, views interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComponentByViews", reflect.TypeOf((*MockViewRepository)(nil).ComponentByViews), ctx, views)
}

// PodsByViews mocks base method
func (m *MockViewRepository) PodsByViews(ctx context.Context, views []int) ([][]*model.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PodsByViews", ctx, views)
	ret0, _ := ret[0].([][]*model.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PodsByViews indicates an expected call of PodsByViews
func (mr *MockViewRepositoryMockRecorder) PodsByViews(ctx, views interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PodsByViews", reflect.TypeOf((*MockViewRepository)(nil).PodsByViews), ctx, views)
}

// TopicByViews mocks base method
func (m *MockViewRepository) TopicByViews(ctx context.Context, views []int) ([]*model.Topic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TopicByViews", ctx, views)
	ret0, _ := ret[0].([]*model.Topic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TopicByViews indicates an expected call of TopicByViews
func (mr *MockViewRepositoryMockRecorder) TopicByViews(ctx, views interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TopicByViews", reflect.TypeOf((*MockViewRepository)(nil).TopicByViews), ctx, views)
}
