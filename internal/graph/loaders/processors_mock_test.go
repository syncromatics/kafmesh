// Code generated by MockGen. DO NOT EDIT.
// Source: ./processors.go

// Package loaders_test is a generated GoMock package.
package loaders_test

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	model "github.com/syncromatics/kafmesh/internal/graph/model"
	reflect "reflect"
)

// MockProcessorRepository is a mock of ProcessorRepository interface
type MockProcessorRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProcessorRepositoryMockRecorder
}

// MockProcessorRepositoryMockRecorder is the mock recorder for MockProcessorRepository
type MockProcessorRepositoryMockRecorder struct {
	mock *MockProcessorRepository
}

// NewMockProcessorRepository creates a new mock instance
func NewMockProcessorRepository(ctrl *gomock.Controller) *MockProcessorRepository {
	mock := &MockProcessorRepository{ctrl: ctrl}
	mock.recorder = &MockProcessorRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProcessorRepository) EXPECT() *MockProcessorRepositoryMockRecorder {
	return m.recorder
}

// ComponentByProcessors mocks base method
func (m *MockProcessorRepository) ComponentByProcessors(ctx context.Context, processors []int) ([]*model.Component, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComponentByProcessors", ctx, processors)
	ret0, _ := ret[0].([]*model.Component)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ComponentByProcessors indicates an expected call of ComponentByProcessors
func (mr *MockProcessorRepositoryMockRecorder) ComponentByProcessors(ctx, processors interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComponentByProcessors", reflect.TypeOf((*MockProcessorRepository)(nil).ComponentByProcessors), ctx, processors)
}

// InputsByProcessors mocks base method
func (m *MockProcessorRepository) InputsByProcessors(ctx context.Context, processors []int) ([][]*model.ProcessorInput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InputsByProcessors", ctx, processors)
	ret0, _ := ret[0].([][]*model.ProcessorInput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InputsByProcessors indicates an expected call of InputsByProcessors
func (mr *MockProcessorRepositoryMockRecorder) InputsByProcessors(ctx, processors interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InputsByProcessors", reflect.TypeOf((*MockProcessorRepository)(nil).InputsByProcessors), ctx, processors)
}

// JoinsByProcessors mocks base method
func (m *MockProcessorRepository) JoinsByProcessors(ctx context.Context, processors []int) ([][]*model.ProcessorJoin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JoinsByProcessors", ctx, processors)
	ret0, _ := ret[0].([][]*model.ProcessorJoin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// JoinsByProcessors indicates an expected call of JoinsByProcessors
func (mr *MockProcessorRepositoryMockRecorder) JoinsByProcessors(ctx, processors interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinsByProcessors", reflect.TypeOf((*MockProcessorRepository)(nil).JoinsByProcessors), ctx, processors)
}

// LookupsByProcessors mocks base method
func (m *MockProcessorRepository) LookupsByProcessors(ctx context.Context, processors []int) ([][]*model.ProcessorLookup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupsByProcessors", ctx, processors)
	ret0, _ := ret[0].([][]*model.ProcessorLookup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupsByProcessors indicates an expected call of LookupsByProcessors
func (mr *MockProcessorRepositoryMockRecorder) LookupsByProcessors(ctx, processors interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupsByProcessors", reflect.TypeOf((*MockProcessorRepository)(nil).LookupsByProcessors), ctx, processors)
}

// OutputsByProcessors mocks base method
func (m *MockProcessorRepository) OutputsByProcessors(ctx context.Context, processors []int) ([][]*model.ProcessorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutputsByProcessors", ctx, processors)
	ret0, _ := ret[0].([][]*model.ProcessorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OutputsByProcessors indicates an expected call of OutputsByProcessors
func (mr *MockProcessorRepositoryMockRecorder) OutputsByProcessors(ctx, processors interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutputsByProcessors", reflect.TypeOf((*MockProcessorRepository)(nil).OutputsByProcessors), ctx, processors)
}

// PodsByProcessors mocks base method
func (m *MockProcessorRepository) PodsByProcessors(ctx context.Context, processors []int) ([][]*model.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PodsByProcessors", ctx, processors)
	ret0, _ := ret[0].([][]*model.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PodsByProcessors indicates an expected call of PodsByProcessors
func (mr *MockProcessorRepositoryMockRecorder) PodsByProcessors(ctx, processors interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PodsByProcessors", reflect.TypeOf((*MockProcessorRepository)(nil).PodsByProcessors), ctx, processors)
}

// PersistenceByProcessors mocks base method
func (m *MockProcessorRepository) PersistenceByProcessors(ctx context.Context, processors []int) ([]*model.Topic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersistenceByProcessors", ctx, processors)
	ret0, _ := ret[0].([]*model.Topic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PersistenceByProcessors indicates an expected call of PersistenceByProcessors
func (mr *MockProcessorRepositoryMockRecorder) PersistenceByProcessors(ctx, processors interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersistenceByProcessors", reflect.TypeOf((*MockProcessorRepository)(nil).PersistenceByProcessors), ctx, processors)
}

// ByID mocks base method
func (m *MockProcessorRepository) ByID(arg0 context.Context, arg1 int) (*model.Processor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ByID", arg0, arg1)
	ret0, _ := ret[0].(*model.Processor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ByID indicates an expected call of ByID
func (mr *MockProcessorRepositoryMockRecorder) ByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByID", reflect.TypeOf((*MockProcessorRepository)(nil).ByID), arg0, arg1)
}
