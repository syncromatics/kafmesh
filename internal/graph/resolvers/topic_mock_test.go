// Code generated by MockGen. DO NOT EDIT.
// Source: ./topic.go

// Package resolvers_test is a generated GoMock package.
package resolvers_test

import (
	gomock "github.com/golang/mock/gomock"
	model "github.com/syncromatics/kafmesh/internal/graph/model"
	reflect "reflect"
)

// MockTopicLoader is a mock of TopicLoader interface
type MockTopicLoader struct {
	ctrl     *gomock.Controller
	recorder *MockTopicLoaderMockRecorder
}

// MockTopicLoaderMockRecorder is the mock recorder for MockTopicLoader
type MockTopicLoaderMockRecorder struct {
	mock *MockTopicLoader
}

// NewMockTopicLoader creates a new mock instance
func NewMockTopicLoader(ctrl *gomock.Controller) *MockTopicLoader {
	mock := &MockTopicLoader{ctrl: ctrl}
	mock.recorder = &MockTopicLoaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTopicLoader) EXPECT() *MockTopicLoaderMockRecorder {
	return m.recorder
}

// ProcessorInputsByTopic mocks base method
func (m *MockTopicLoader) ProcessorInputsByTopic(arg0 int) ([]*model.ProcessorInput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessorInputsByTopic", arg0)
	ret0, _ := ret[0].([]*model.ProcessorInput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessorInputsByTopic indicates an expected call of ProcessorInputsByTopic
func (mr *MockTopicLoaderMockRecorder) ProcessorInputsByTopic(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessorInputsByTopic", reflect.TypeOf((*MockTopicLoader)(nil).ProcessorInputsByTopic), arg0)
}

// ProcessorJoinsByTopic mocks base method
func (m *MockTopicLoader) ProcessorJoinsByTopic(arg0 int) ([]*model.ProcessorJoin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessorJoinsByTopic", arg0)
	ret0, _ := ret[0].([]*model.ProcessorJoin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessorJoinsByTopic indicates an expected call of ProcessorJoinsByTopic
func (mr *MockTopicLoaderMockRecorder) ProcessorJoinsByTopic(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessorJoinsByTopic", reflect.TypeOf((*MockTopicLoader)(nil).ProcessorJoinsByTopic), arg0)
}

// ProcessorLookupsByTopic mocks base method
func (m *MockTopicLoader) ProcessorLookupsByTopic(arg0 int) ([]*model.ProcessorLookup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessorLookupsByTopic", arg0)
	ret0, _ := ret[0].([]*model.ProcessorLookup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessorLookupsByTopic indicates an expected call of ProcessorLookupsByTopic
func (mr *MockTopicLoaderMockRecorder) ProcessorLookupsByTopic(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessorLookupsByTopic", reflect.TypeOf((*MockTopicLoader)(nil).ProcessorLookupsByTopic), arg0)
}

// ProcessorOutputsByTopic mocks base method
func (m *MockTopicLoader) ProcessorOutputsByTopic(arg0 int) ([]*model.ProcessorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessorOutputsByTopic", arg0)
	ret0, _ := ret[0].([]*model.ProcessorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessorOutputsByTopic indicates an expected call of ProcessorOutputsByTopic
func (mr *MockTopicLoaderMockRecorder) ProcessorOutputsByTopic(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessorOutputsByTopic", reflect.TypeOf((*MockTopicLoader)(nil).ProcessorOutputsByTopic), arg0)
}

// ProcessorPersistencesByTopic mocks base method
func (m *MockTopicLoader) ProcessorPersistencesByTopic(arg0 int) ([]*model.Processor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessorPersistencesByTopic", arg0)
	ret0, _ := ret[0].([]*model.Processor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessorPersistencesByTopic indicates an expected call of ProcessorPersistencesByTopic
func (mr *MockTopicLoaderMockRecorder) ProcessorPersistencesByTopic(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessorPersistencesByTopic", reflect.TypeOf((*MockTopicLoader)(nil).ProcessorPersistencesByTopic), arg0)
}

// SinksByTopic mocks base method
func (m *MockTopicLoader) SinksByTopic(arg0 int) ([]*model.Sink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SinksByTopic", arg0)
	ret0, _ := ret[0].([]*model.Sink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SinksByTopic indicates an expected call of SinksByTopic
func (mr *MockTopicLoaderMockRecorder) SinksByTopic(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SinksByTopic", reflect.TypeOf((*MockTopicLoader)(nil).SinksByTopic), arg0)
}

// SourcesByTopic mocks base method
func (m *MockTopicLoader) SourcesByTopic(arg0 int) ([]*model.Source, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SourcesByTopic", arg0)
	ret0, _ := ret[0].([]*model.Source)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SourcesByTopic indicates an expected call of SourcesByTopic
func (mr *MockTopicLoaderMockRecorder) SourcesByTopic(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SourcesByTopic", reflect.TypeOf((*MockTopicLoader)(nil).SourcesByTopic), arg0)
}

// ViewSinksByTopic mocks base method
func (m *MockTopicLoader) ViewSinksByTopic(arg0 int) ([]*model.ViewSink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewSinksByTopic", arg0)
	ret0, _ := ret[0].([]*model.ViewSink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewSinksByTopic indicates an expected call of ViewSinksByTopic
func (mr *MockTopicLoaderMockRecorder) ViewSinksByTopic(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewSinksByTopic", reflect.TypeOf((*MockTopicLoader)(nil).ViewSinksByTopic), arg0)
}

// ViewSourcesByTopic mocks base method
func (m *MockTopicLoader) ViewSourcesByTopic(arg0 int) ([]*model.ViewSource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewSourcesByTopic", arg0)
	ret0, _ := ret[0].([]*model.ViewSource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewSourcesByTopic indicates an expected call of ViewSourcesByTopic
func (mr *MockTopicLoaderMockRecorder) ViewSourcesByTopic(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewSourcesByTopic", reflect.TypeOf((*MockTopicLoader)(nil).ViewSourcesByTopic), arg0)
}

// ViewsByTopic mocks base method
func (m *MockTopicLoader) ViewsByTopic(arg0 int) ([]*model.View, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewsByTopic", arg0)
	ret0, _ := ret[0].([]*model.View)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewsByTopic indicates an expected call of ViewsByTopic
func (mr *MockTopicLoaderMockRecorder) ViewsByTopic(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewsByTopic", reflect.TypeOf((*MockTopicLoader)(nil).ViewsByTopic), arg0)
}
