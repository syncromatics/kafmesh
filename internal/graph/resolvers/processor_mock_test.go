// Code generated by MockGen. DO NOT EDIT.
// Source: ./processor.go

// Package resolvers_test is a generated GoMock package.
package resolvers_test

import (
	gomock "github.com/golang/mock/gomock"
	model "github.com/syncromatics/kafmesh/internal/graph/model"
	reflect "reflect"
)

// MockProcessorLoader is a mock of ProcessorLoader interface
type MockProcessorLoader struct {
	ctrl     *gomock.Controller
	recorder *MockProcessorLoaderMockRecorder
}

// MockProcessorLoaderMockRecorder is the mock recorder for MockProcessorLoader
type MockProcessorLoaderMockRecorder struct {
	mock *MockProcessorLoader
}

// NewMockProcessorLoader creates a new mock instance
func NewMockProcessorLoader(ctrl *gomock.Controller) *MockProcessorLoader {
	mock := &MockProcessorLoader{ctrl: ctrl}
	mock.recorder = &MockProcessorLoaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProcessorLoader) EXPECT() *MockProcessorLoaderMockRecorder {
	return m.recorder
}

// ComponentByProcessor mocks base method
func (m *MockProcessorLoader) ComponentByProcessor(arg0 int) (*model.Component, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComponentByProcessor", arg0)
	ret0, _ := ret[0].(*model.Component)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ComponentByProcessor indicates an expected call of ComponentByProcessor
func (mr *MockProcessorLoaderMockRecorder) ComponentByProcessor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComponentByProcessor", reflect.TypeOf((*MockProcessorLoader)(nil).ComponentByProcessor), arg0)
}

// InputsByProcessor mocks base method
func (m *MockProcessorLoader) InputsByProcessor(arg0 int) ([]*model.ProcessorInput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InputsByProcessor", arg0)
	ret0, _ := ret[0].([]*model.ProcessorInput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InputsByProcessor indicates an expected call of InputsByProcessor
func (mr *MockProcessorLoaderMockRecorder) InputsByProcessor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InputsByProcessor", reflect.TypeOf((*MockProcessorLoader)(nil).InputsByProcessor), arg0)
}

// JoinsByProcessor mocks base method
func (m *MockProcessorLoader) JoinsByProcessor(arg0 int) ([]*model.ProcessorJoin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JoinsByProcessor", arg0)
	ret0, _ := ret[0].([]*model.ProcessorJoin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// JoinsByProcessor indicates an expected call of JoinsByProcessor
func (mr *MockProcessorLoaderMockRecorder) JoinsByProcessor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinsByProcessor", reflect.TypeOf((*MockProcessorLoader)(nil).JoinsByProcessor), arg0)
}

// LookupsByProcessor mocks base method
func (m *MockProcessorLoader) LookupsByProcessor(arg0 int) ([]*model.ProcessorLookup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupsByProcessor", arg0)
	ret0, _ := ret[0].([]*model.ProcessorLookup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupsByProcessor indicates an expected call of LookupsByProcessor
func (mr *MockProcessorLoaderMockRecorder) LookupsByProcessor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupsByProcessor", reflect.TypeOf((*MockProcessorLoader)(nil).LookupsByProcessor), arg0)
}

// OutputsByProcessor mocks base method
func (m *MockProcessorLoader) OutputsByProcessor(arg0 int) ([]*model.ProcessorOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutputsByProcessor", arg0)
	ret0, _ := ret[0].([]*model.ProcessorOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OutputsByProcessor indicates an expected call of OutputsByProcessor
func (mr *MockProcessorLoaderMockRecorder) OutputsByProcessor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutputsByProcessor", reflect.TypeOf((*MockProcessorLoader)(nil).OutputsByProcessor), arg0)
}

// PersistenceByProcessor mocks base method
func (m *MockProcessorLoader) PersistenceByProcessor(arg0 int) (*model.Topic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersistenceByProcessor", arg0)
	ret0, _ := ret[0].(*model.Topic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PersistenceByProcessor indicates an expected call of PersistenceByProcessor
func (mr *MockProcessorLoaderMockRecorder) PersistenceByProcessor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersistenceByProcessor", reflect.TypeOf((*MockProcessorLoader)(nil).PersistenceByProcessor), arg0)
}

// PodsByProcessor mocks base method
func (m *MockProcessorLoader) PodsByProcessor(arg0 int) ([]*model.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PodsByProcessor", arg0)
	ret0, _ := ret[0].([]*model.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PodsByProcessor indicates an expected call of PodsByProcessor
func (mr *MockProcessorLoaderMockRecorder) PodsByProcessor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PodsByProcessor", reflect.TypeOf((*MockProcessorLoader)(nil).PodsByProcessor), arg0)
}
