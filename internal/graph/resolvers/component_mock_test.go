// Code generated by MockGen. DO NOT EDIT.
// Source: ./component.go

// Package resolvers_test is a generated GoMock package.
package resolvers_test

import (
	gomock "github.com/golang/mock/gomock"
	model "github.com/syncromatics/kafmesh/internal/graph/model"
	reflect "reflect"
)

// MockComponentLoader is a mock of ComponentLoader interface
type MockComponentLoader struct {
	ctrl     *gomock.Controller
	recorder *MockComponentLoaderMockRecorder
}

// MockComponentLoaderMockRecorder is the mock recorder for MockComponentLoader
type MockComponentLoaderMockRecorder struct {
	mock *MockComponentLoader
}

// NewMockComponentLoader creates a new mock instance
func NewMockComponentLoader(ctrl *gomock.Controller) *MockComponentLoader {
	mock := &MockComponentLoader{ctrl: ctrl}
	mock.recorder = &MockComponentLoaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockComponentLoader) EXPECT() *MockComponentLoaderMockRecorder {
	return m.recorder
}

// ServiceByComponent mocks base method
func (m *MockComponentLoader) ServiceByComponent(arg0 int) (*model.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceByComponent", arg0)
	ret0, _ := ret[0].(*model.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServiceByComponent indicates an expected call of ServiceByComponent
func (mr *MockComponentLoaderMockRecorder) ServiceByComponent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceByComponent", reflect.TypeOf((*MockComponentLoader)(nil).ServiceByComponent), arg0)
}

// ProcessorsByComponent mocks base method
func (m *MockComponentLoader) ProcessorsByComponent(arg0 int) ([]*model.Processor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessorsByComponent", arg0)
	ret0, _ := ret[0].([]*model.Processor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessorsByComponent indicates an expected call of ProcessorsByComponent
func (mr *MockComponentLoaderMockRecorder) ProcessorsByComponent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessorsByComponent", reflect.TypeOf((*MockComponentLoader)(nil).ProcessorsByComponent), arg0)
}

// SinksByComponent mocks base method
func (m *MockComponentLoader) SinksByComponent(arg0 int) ([]*model.Sink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SinksByComponent", arg0)
	ret0, _ := ret[0].([]*model.Sink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SinksByComponent indicates an expected call of SinksByComponent
func (mr *MockComponentLoaderMockRecorder) SinksByComponent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SinksByComponent", reflect.TypeOf((*MockComponentLoader)(nil).SinksByComponent), arg0)
}

// SourcesByComponent mocks base method
func (m *MockComponentLoader) SourcesByComponent(arg0 int) ([]*model.Source, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SourcesByComponent", arg0)
	ret0, _ := ret[0].([]*model.Source)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SourcesByComponent indicates an expected call of SourcesByComponent
func (mr *MockComponentLoaderMockRecorder) SourcesByComponent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SourcesByComponent", reflect.TypeOf((*MockComponentLoader)(nil).SourcesByComponent), arg0)
}

// ViewSinksByComponent mocks base method
func (m *MockComponentLoader) ViewSinksByComponent(arg0 int) ([]*model.ViewSink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewSinksByComponent", arg0)
	ret0, _ := ret[0].([]*model.ViewSink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewSinksByComponent indicates an expected call of ViewSinksByComponent
func (mr *MockComponentLoaderMockRecorder) ViewSinksByComponent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewSinksByComponent", reflect.TypeOf((*MockComponentLoader)(nil).ViewSinksByComponent), arg0)
}

// ViewSourcesByComponent mocks base method
func (m *MockComponentLoader) ViewSourcesByComponent(arg0 int) ([]*model.ViewSource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewSourcesByComponent", arg0)
	ret0, _ := ret[0].([]*model.ViewSource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewSourcesByComponent indicates an expected call of ViewSourcesByComponent
func (mr *MockComponentLoaderMockRecorder) ViewSourcesByComponent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewSourcesByComponent", reflect.TypeOf((*MockComponentLoader)(nil).ViewSourcesByComponent), arg0)
}

// ViewsByComponent mocks base method
func (m *MockComponentLoader) ViewsByComponent(arg0 int) ([]*model.View, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewsByComponent", arg0)
	ret0, _ := ret[0].([]*model.View)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewsByComponent indicates an expected call of ViewsByComponent
func (mr *MockComponentLoaderMockRecorder) ViewsByComponent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewsByComponent", reflect.TypeOf((*MockComponentLoader)(nil).ViewsByComponent), arg0)
}
