// Code generated by MockGen. DO NOT EDIT.
// Source: ./subscription.go

// Package resolvers_test is a generated GoMock package.
package resolvers_test

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	model "github.com/syncromatics/kafmesh/internal/graph/model"
	reflect "reflect"
)

// MockProcessorWatcher is a mock of ProcessorWatcher interface
type MockProcessorWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockProcessorWatcherMockRecorder
}

// MockProcessorWatcherMockRecorder is the mock recorder for MockProcessorWatcher
type MockProcessorWatcherMockRecorder struct {
	mock *MockProcessorWatcher
}

// NewMockProcessorWatcher creates a new mock instance
func NewMockProcessorWatcher(ctrl *gomock.Controller) *MockProcessorWatcher {
	mock := &MockProcessorWatcher{ctrl: ctrl}
	mock.recorder = &MockProcessorWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProcessorWatcher) EXPECT() *MockProcessorWatcherMockRecorder {
	return m.recorder
}

// WatchProcessor mocks base method
func (m *MockProcessorWatcher) WatchProcessor(arg0 context.Context, arg1 *model.WatchProcessorInput) (<-chan *model.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchProcessor", arg0, arg1)
	ret0, _ := ret[0].(<-chan *model.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchProcessor indicates an expected call of WatchProcessor
func (mr *MockProcessorWatcherMockRecorder) WatchProcessor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchProcessor", reflect.TypeOf((*MockProcessorWatcher)(nil).WatchProcessor), arg0, arg1)
}
