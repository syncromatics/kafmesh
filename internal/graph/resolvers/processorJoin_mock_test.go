// Code generated by MockGen. DO NOT EDIT.
// Source: ./processorJoin.go

// Package resolvers_test is a generated GoMock package.
package resolvers_test

import (
	gomock "github.com/golang/mock/gomock"
	model "github.com/syncromatics/kafmesh/internal/graph/model"
	reflect "reflect"
)

// MockProcessorJoinLoader is a mock of ProcessorJoinLoader interface
type MockProcessorJoinLoader struct {
	ctrl     *gomock.Controller
	recorder *MockProcessorJoinLoaderMockRecorder
}

// MockProcessorJoinLoaderMockRecorder is the mock recorder for MockProcessorJoinLoader
type MockProcessorJoinLoaderMockRecorder struct {
	mock *MockProcessorJoinLoader
}

// NewMockProcessorJoinLoader creates a new mock instance
func NewMockProcessorJoinLoader(ctrl *gomock.Controller) *MockProcessorJoinLoader {
	mock := &MockProcessorJoinLoader{ctrl: ctrl}
	mock.recorder = &MockProcessorJoinLoaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProcessorJoinLoader) EXPECT() *MockProcessorJoinLoaderMockRecorder {
	return m.recorder
}

// ProcessorByJoin mocks base method
func (m *MockProcessorJoinLoader) ProcessorByJoin(arg0 int) (*model.Processor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessorByJoin", arg0)
	ret0, _ := ret[0].(*model.Processor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessorByJoin indicates an expected call of ProcessorByJoin
func (mr *MockProcessorJoinLoaderMockRecorder) ProcessorByJoin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessorByJoin", reflect.TypeOf((*MockProcessorJoinLoader)(nil).ProcessorByJoin), arg0)
}

// TopicByJoin mocks base method
func (m *MockProcessorJoinLoader) TopicByJoin(arg0 int) (*model.Topic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TopicByJoin", arg0)
	ret0, _ := ret[0].(*model.Topic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TopicByJoin indicates an expected call of TopicByJoin
func (mr *MockProcessorJoinLoaderMockRecorder) TopicByJoin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TopicByJoin", reflect.TypeOf((*MockProcessorJoinLoader)(nil).TopicByJoin), arg0)
}
