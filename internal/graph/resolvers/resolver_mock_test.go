// Code generated by MockGen. DO NOT EDIT.
// Source: ./resolver.go

// Package resolvers_test is a generated GoMock package.
package resolvers_test

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	resolvers "github.com/syncromatics/kafmesh/internal/graph/resolvers"
	reflect "reflect"
)

// MockDataLoaders is a mock of DataLoaders interface
type MockDataLoaders struct {
	ctrl     *gomock.Controller
	recorder *MockDataLoadersMockRecorder
}

// MockDataLoadersMockRecorder is the mock recorder for MockDataLoaders
type MockDataLoadersMockRecorder struct {
	mock *MockDataLoaders
}

// NewMockDataLoaders creates a new mock instance
func NewMockDataLoaders(ctrl *gomock.Controller) *MockDataLoaders {
	mock := &MockDataLoaders{ctrl: ctrl}
	mock.recorder = &MockDataLoadersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDataLoaders) EXPECT() *MockDataLoadersMockRecorder {
	return m.recorder
}

// ComponentLoader mocks base method
func (m *MockDataLoaders) ComponentLoader(arg0 context.Context) resolvers.ComponentLoader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComponentLoader", arg0)
	ret0, _ := ret[0].(resolvers.ComponentLoader)
	return ret0
}

// ComponentLoader indicates an expected call of ComponentLoader
func (mr *MockDataLoadersMockRecorder) ComponentLoader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComponentLoader", reflect.TypeOf((*MockDataLoaders)(nil).ComponentLoader), arg0)
}

// PodLoader mocks base method
func (m *MockDataLoaders) PodLoader(arg0 context.Context) resolvers.PodLoader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PodLoader", arg0)
	ret0, _ := ret[0].(resolvers.PodLoader)
	return ret0
}

// PodLoader indicates an expected call of PodLoader
func (mr *MockDataLoadersMockRecorder) PodLoader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PodLoader", reflect.TypeOf((*MockDataLoaders)(nil).PodLoader), arg0)
}

// ProcessorLoader mocks base method
func (m *MockDataLoaders) ProcessorLoader(arg0 context.Context) resolvers.ProcessorLoader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessorLoader", arg0)
	ret0, _ := ret[0].(resolvers.ProcessorLoader)
	return ret0
}

// ProcessorLoader indicates an expected call of ProcessorLoader
func (mr *MockDataLoadersMockRecorder) ProcessorLoader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessorLoader", reflect.TypeOf((*MockDataLoaders)(nil).ProcessorLoader), arg0)
}

// ProcessorInputLoader mocks base method
func (m *MockDataLoaders) ProcessorInputLoader(arg0 context.Context) resolvers.ProcessorInputLoader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessorInputLoader", arg0)
	ret0, _ := ret[0].(resolvers.ProcessorInputLoader)
	return ret0
}

// ProcessorInputLoader indicates an expected call of ProcessorInputLoader
func (mr *MockDataLoadersMockRecorder) ProcessorInputLoader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessorInputLoader", reflect.TypeOf((*MockDataLoaders)(nil).ProcessorInputLoader), arg0)
}

// ProcessorJoinLoader mocks base method
func (m *MockDataLoaders) ProcessorJoinLoader(arg0 context.Context) resolvers.ProcessorJoinLoader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessorJoinLoader", arg0)
	ret0, _ := ret[0].(resolvers.ProcessorJoinLoader)
	return ret0
}

// ProcessorJoinLoader indicates an expected call of ProcessorJoinLoader
func (mr *MockDataLoadersMockRecorder) ProcessorJoinLoader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessorJoinLoader", reflect.TypeOf((*MockDataLoaders)(nil).ProcessorJoinLoader), arg0)
}

// ProcessorLookupLoader mocks base method
func (m *MockDataLoaders) ProcessorLookupLoader(arg0 context.Context) resolvers.ProcessorLookupLoader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessorLookupLoader", arg0)
	ret0, _ := ret[0].(resolvers.ProcessorLookupLoader)
	return ret0
}

// ProcessorLookupLoader indicates an expected call of ProcessorLookupLoader
func (mr *MockDataLoadersMockRecorder) ProcessorLookupLoader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessorLookupLoader", reflect.TypeOf((*MockDataLoaders)(nil).ProcessorLookupLoader), arg0)
}

// ProcessorOutputLoader mocks base method
func (m *MockDataLoaders) ProcessorOutputLoader(arg0 context.Context) resolvers.ProcessorOutputLoader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessorOutputLoader", arg0)
	ret0, _ := ret[0].(resolvers.ProcessorOutputLoader)
	return ret0
}

// ProcessorOutputLoader indicates an expected call of ProcessorOutputLoader
func (mr *MockDataLoadersMockRecorder) ProcessorOutputLoader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessorOutputLoader", reflect.TypeOf((*MockDataLoaders)(nil).ProcessorOutputLoader), arg0)
}

// QueryLoader mocks base method
func (m *MockDataLoaders) QueryLoader(arg0 context.Context) resolvers.QueryLoader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryLoader", arg0)
	ret0, _ := ret[0].(resolvers.QueryLoader)
	return ret0
}

// QueryLoader indicates an expected call of QueryLoader
func (mr *MockDataLoadersMockRecorder) QueryLoader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryLoader", reflect.TypeOf((*MockDataLoaders)(nil).QueryLoader), arg0)
}

// ServiceLoader mocks base method
func (m *MockDataLoaders) ServiceLoader(arg0 context.Context) resolvers.ServiceLoader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceLoader", arg0)
	ret0, _ := ret[0].(resolvers.ServiceLoader)
	return ret0
}

// ServiceLoader indicates an expected call of ServiceLoader
func (mr *MockDataLoadersMockRecorder) ServiceLoader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceLoader", reflect.TypeOf((*MockDataLoaders)(nil).ServiceLoader), arg0)
}

// SinkLoader mocks base method
func (m *MockDataLoaders) SinkLoader(arg0 context.Context) resolvers.SinkLoader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SinkLoader", arg0)
	ret0, _ := ret[0].(resolvers.SinkLoader)
	return ret0
}

// SinkLoader indicates an expected call of SinkLoader
func (mr *MockDataLoadersMockRecorder) SinkLoader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SinkLoader", reflect.TypeOf((*MockDataLoaders)(nil).SinkLoader), arg0)
}

// SourceLoader mocks base method
func (m *MockDataLoaders) SourceLoader(arg0 context.Context) resolvers.SourceLoader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SourceLoader", arg0)
	ret0, _ := ret[0].(resolvers.SourceLoader)
	return ret0
}

// SourceLoader indicates an expected call of SourceLoader
func (mr *MockDataLoadersMockRecorder) SourceLoader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SourceLoader", reflect.TypeOf((*MockDataLoaders)(nil).SourceLoader), arg0)
}

// TopicLoader mocks base method
func (m *MockDataLoaders) TopicLoader(arg0 context.Context) resolvers.TopicLoader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TopicLoader", arg0)
	ret0, _ := ret[0].(resolvers.TopicLoader)
	return ret0
}

// TopicLoader indicates an expected call of TopicLoader
func (mr *MockDataLoadersMockRecorder) TopicLoader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TopicLoader", reflect.TypeOf((*MockDataLoaders)(nil).TopicLoader), arg0)
}

// ViewLoader mocks base method
func (m *MockDataLoaders) ViewLoader(arg0 context.Context) resolvers.ViewLoader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewLoader", arg0)
	ret0, _ := ret[0].(resolvers.ViewLoader)
	return ret0
}

// ViewLoader indicates an expected call of ViewLoader
func (mr *MockDataLoadersMockRecorder) ViewLoader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewLoader", reflect.TypeOf((*MockDataLoaders)(nil).ViewLoader), arg0)
}

// ViewSinkLoader mocks base method
func (m *MockDataLoaders) ViewSinkLoader(arg0 context.Context) resolvers.ViewSinkLoader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewSinkLoader", arg0)
	ret0, _ := ret[0].(resolvers.ViewSinkLoader)
	return ret0
}

// ViewSinkLoader indicates an expected call of ViewSinkLoader
func (mr *MockDataLoadersMockRecorder) ViewSinkLoader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewSinkLoader", reflect.TypeOf((*MockDataLoaders)(nil).ViewSinkLoader), arg0)
}

// ViewSourceLoader mocks base method
func (m *MockDataLoaders) ViewSourceLoader(arg0 context.Context) resolvers.ViewSourceLoader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewSourceLoader", arg0)
	ret0, _ := ret[0].(resolvers.ViewSourceLoader)
	return ret0
}

// ViewSourceLoader indicates an expected call of ViewSourceLoader
func (mr *MockDataLoadersMockRecorder) ViewSourceLoader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewSourceLoader", reflect.TypeOf((*MockDataLoaders)(nil).ViewSourceLoader), arg0)
}

// MockSubscribers is a mock of Subscribers interface
type MockSubscribers struct {
	ctrl     *gomock.Controller
	recorder *MockSubscribersMockRecorder
}

// MockSubscribersMockRecorder is the mock recorder for MockSubscribers
type MockSubscribersMockRecorder struct {
	mock *MockSubscribers
}

// NewMockSubscribers creates a new mock instance
func NewMockSubscribers(ctrl *gomock.Controller) *MockSubscribers {
	mock := &MockSubscribers{ctrl: ctrl}
	mock.recorder = &MockSubscribersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSubscribers) EXPECT() *MockSubscribersMockRecorder {
	return m.recorder
}

// Processor mocks base method
func (m *MockSubscribers) Processor() resolvers.ProcessorWatcher {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Processor")
	ret0, _ := ret[0].(resolvers.ProcessorWatcher)
	return ret0
}

// Processor indicates an expected call of Processor
func (mr *MockSubscribersMockRecorder) Processor() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Processor", reflect.TypeOf((*MockSubscribers)(nil).Processor))
}
