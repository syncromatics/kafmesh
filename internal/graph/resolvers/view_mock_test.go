// Code generated by MockGen. DO NOT EDIT.
// Source: ./view.go

// Package resolvers_test is a generated GoMock package.
package resolvers_test

import (
	gomock "github.com/golang/mock/gomock"
	model "github.com/syncromatics/kafmesh/internal/graph/model"
	reflect "reflect"
)

// MockViewLoader is a mock of ViewLoader interface
type MockViewLoader struct {
	ctrl     *gomock.Controller
	recorder *MockViewLoaderMockRecorder
}

// MockViewLoaderMockRecorder is the mock recorder for MockViewLoader
type MockViewLoaderMockRecorder struct {
	mock *MockViewLoader
}

// NewMockViewLoader creates a new mock instance
func NewMockViewLoader(ctrl *gomock.Controller) *MockViewLoader {
	mock := &MockViewLoader{ctrl: ctrl}
	mock.recorder = &MockViewLoaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockViewLoader) EXPECT() *MockViewLoaderMockRecorder {
	return m.recorder
}

// ComponentByView mocks base method
func (m *MockViewLoader) ComponentByView(arg0 int) (*model.Component, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComponentByView", arg0)
	ret0, _ := ret[0].(*model.Component)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ComponentByView indicates an expected call of ComponentByView
func (mr *MockViewLoaderMockRecorder) ComponentByView(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComponentByView", reflect.TypeOf((*MockViewLoader)(nil).ComponentByView), arg0)
}

// PodsByView mocks base method
func (m *MockViewLoader) PodsByView(arg0 int) ([]*model.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PodsByView", arg0)
	ret0, _ := ret[0].([]*model.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PodsByView indicates an expected call of PodsByView
func (mr *MockViewLoaderMockRecorder) PodsByView(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PodsByView", reflect.TypeOf((*MockViewLoader)(nil).PodsByView), arg0)
}

// TopicByView mocks base method
func (m *MockViewLoader) TopicByView(arg0 int) (*model.Topic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TopicByView", arg0)
	ret0, _ := ret[0].(*model.Topic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TopicByView indicates an expected call of TopicByView
func (mr *MockViewLoaderMockRecorder) TopicByView(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TopicByView", reflect.TypeOf((*MockViewLoader)(nil).TopicByView), arg0)
}
