// Code generated by MockGen. DO NOT EDIT.
// Source: ./pod.go

// Package resolvers_test is a generated GoMock package.
package resolvers_test

import (
	gomock "github.com/golang/mock/gomock"
	model "github.com/syncromatics/kafmesh/internal/graph/model"
	reflect "reflect"
)

// MockPodLoader is a mock of PodLoader interface
type MockPodLoader struct {
	ctrl     *gomock.Controller
	recorder *MockPodLoaderMockRecorder
}

// MockPodLoaderMockRecorder is the mock recorder for MockPodLoader
type MockPodLoaderMockRecorder struct {
	mock *MockPodLoader
}

// NewMockPodLoader creates a new mock instance
func NewMockPodLoader(ctrl *gomock.Controller) *MockPodLoader {
	mock := &MockPodLoader{ctrl: ctrl}
	mock.recorder = &MockPodLoaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPodLoader) EXPECT() *MockPodLoaderMockRecorder {
	return m.recorder
}

// ProcessorsByPod mocks base method
func (m *MockPodLoader) ProcessorsByPod(arg0 int) ([]*model.Processor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessorsByPod", arg0)
	ret0, _ := ret[0].([]*model.Processor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessorsByPod indicates an expected call of ProcessorsByPod
func (mr *MockPodLoaderMockRecorder) ProcessorsByPod(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessorsByPod", reflect.TypeOf((*MockPodLoader)(nil).ProcessorsByPod), arg0)
}

// SinksByPod mocks base method
func (m *MockPodLoader) SinksByPod(arg0 int) ([]*model.Sink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SinksByPod", arg0)
	ret0, _ := ret[0].([]*model.Sink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SinksByPod indicates an expected call of SinksByPod
func (mr *MockPodLoaderMockRecorder) SinksByPod(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SinksByPod", reflect.TypeOf((*MockPodLoader)(nil).SinksByPod), arg0)
}

// SourcesByPod mocks base method
func (m *MockPodLoader) SourcesByPod(arg0 int) ([]*model.Source, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SourcesByPod", arg0)
	ret0, _ := ret[0].([]*model.Source)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SourcesByPod indicates an expected call of SourcesByPod
func (mr *MockPodLoaderMockRecorder) SourcesByPod(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SourcesByPod", reflect.TypeOf((*MockPodLoader)(nil).SourcesByPod), arg0)
}

// ViewSinksByPod mocks base method
func (m *MockPodLoader) ViewSinksByPod(arg0 int) ([]*model.ViewSink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewSinksByPod", arg0)
	ret0, _ := ret[0].([]*model.ViewSink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewSinksByPod indicates an expected call of ViewSinksByPod
func (mr *MockPodLoaderMockRecorder) ViewSinksByPod(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewSinksByPod", reflect.TypeOf((*MockPodLoader)(nil).ViewSinksByPod), arg0)
}

// ViewSourcesByPod mocks base method
func (m *MockPodLoader) ViewSourcesByPod(arg0 int) ([]*model.ViewSource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewSourcesByPod", arg0)
	ret0, _ := ret[0].([]*model.ViewSource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewSourcesByPod indicates an expected call of ViewSourcesByPod
func (mr *MockPodLoaderMockRecorder) ViewSourcesByPod(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewSourcesByPod", reflect.TypeOf((*MockPodLoader)(nil).ViewSourcesByPod), arg0)
}

// ViewsByPod mocks base method
func (m *MockPodLoader) ViewsByPod(arg0 int) ([]*model.View, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewsByPod", arg0)
	ret0, _ := ret[0].([]*model.View)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewsByPod indicates an expected call of ViewsByPod
func (mr *MockPodLoaderMockRecorder) ViewsByPod(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewsByPod", reflect.TypeOf((*MockPodLoader)(nil).ViewsByPod), arg0)
}
